// @generated by protobuf-ts 2.8.2 with parameter client_grpc1,output_legacy_commonjs
// @generated from protobuf file "grpc_api/bilibili/pgc/gateway/player/v2/playurl.proto" (package "bilibili.pgc.gateway.player.v2", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../../../../../google/protobuf/timestamp";
/**
 * 角标信息
 *
 * @generated from protobuf message bilibili.pgc.gateway.player.v2.BadgeInfo
 */
export interface BadgeInfo {
    /**
     * 角标文案
     *
     * @generated from protobuf field: string text = 1;
     */
    text: string;
    /**
     * 角标色值
     *
     * @generated from protobuf field: string bg_color = 2;
     */
    bgColor: string;
    /**
     * 角标色值-夜间模式
     *
     * @generated from protobuf field: string bg_color_night = 3;
     */
    bgColorNight: string;
    /**
     * 文案色值
     *
     * @generated from protobuf field: string text_color = 4;
     */
    textColor: string;
    /**
     * ? 新版本客户端已弃用此项
     *
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.GradientColor bg_gradient_color = 5;
     */
    bgGradientColor?: GradientColor;
}
/**
 * Dialog组件: 底部显示
 *
 * @generated from protobuf message bilibili.pgc.gateway.player.v2.BottomDisplay
 */
export interface BottomDisplay {
    /**
     * 文案
     *
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.TextInfo title = 1;
     */
    title?: TextInfo;
    /**
     * 图标
     *
     * @generated from protobuf field: string icon = 2;
     */
    icon: string;
}
/**
 * 按钮信息
 *
 * @generated from protobuf message bilibili.pgc.gateway.player.v2.ButtonInfo
 */
export interface ButtonInfo {
    /**
     * 按钮文案
     *
     * @generated from protobuf field: string text = 1;
     */
    text: string;
    /**
     * 按钮字体色值
     *
     * @generated from protobuf field: string text_color = 2;
     */
    textColor: string;
    /**
     * 按钮字体色值-夜间模式
     *
     * @generated from protobuf field: string text_color_night = 3;
     */
    textColorNight: string;
    /**
     * 按钮背景色
     *
     * @generated from protobuf field: string bg_color = 4;
     */
    bgColor: string;
    /**
     * 按钮背景色-夜间模式
     *
     * @generated from protobuf field: string bg_color_night = 5;
     */
    bgColorNight: string;
    /**
     * 按钮链接
     *
     * @generated from protobuf field: string link = 6;
     */
    link: string;
    /**
     * 按钮动作类型
     *
     * @generated from protobuf field: string action_type = 7;
     */
    actionType: string;
    /**
     * 角标信息
     *
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.BadgeInfo badge_info = 8;
     */
    badgeInfo?: BadgeInfo;
    /**
     * 埋点上报信息
     *
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.Report report = 9;
     */
    report?: Report;
    /**
     * 左侧删除线样式文案
     *
     * @generated from protobuf field: string left_strikethrough_text = 10;
     */
    leftStrikethroughText: string;
    /**
     * 缩略按钮文案信息
     *
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.TextInfo simple_text_info = 11;
     */
    simpleTextInfo?: TextInfo;
    /**
     * 缩略按钮背景色值
     *
     * @generated from protobuf field: string simple_bg_color = 12;
     */
    simpleBgColor: string;
    /**
     * 缩略按钮字体色值-夜间模式
     *
     * @generated from protobuf field: string simple_bg_color_night = 13;
     */
    simpleBgColorNight: string;
    /**
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.GradientColor bg_gradient_color = 14;
     */
    bgGradientColor?: GradientColor;
    /**
     * @generated from protobuf field: map<string, string> order_report_params = 15;
     */
    orderReportParams: {
        [key: string]: string;
    };
}
/**
 * 投屏限制. code = 0 时为无限制, 否则表示不不允许投屏并提示message
 *
 * @generated from protobuf message bilibili.pgc.gateway.player.v2.CastTips
 */
export interface CastTips {
    /**
     * @generated from protobuf field: int32 code = 1;
     */
    code: number;
    /**
     *
     *
     * @generated from protobuf field: string message = 2;
     */
    message: string;
}
/**
 * 跳过片头/片尾配置
 *
 * @generated from protobuf message bilibili.pgc.gateway.player.v2.ClipInfo
 */
export interface ClipInfo {
    /**
     * @generated from protobuf field: int64 material_no = 1;
     */
    materialNo: bigint;
    /**
     * DASH分段始
     *
     * @generated from protobuf field: int32 start = 2;
     */
    start: number;
    /**
     * DASH分段终
     *
     * @generated from protobuf field: int32 end = 3;
     */
    end: number;
    /**
     * Clip类型
     *
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.ClipType clip_type = 4;
     */
    clipType: ClipType;
    /**
     * 跳过片头/片尾时的提示语
     *
     * @generated from protobuf field: string toast_text = 5;
     */
    toastText: string;
    /**
     *
     *
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.MultiView multi_view = 6;
     */
    multiView?: MultiView;
}
/**
 * @generated from protobuf message bilibili.pgc.gateway.player.v2.ContinuePlayInfo
 */
export interface ContinuePlayInfo {
    /**
     * @generated from protobuf field: int64 continue_play_ep_id = 1;
     */
    continuePlayEpId: bigint;
}
/**
 * 优惠券
 *
 * @generated from protobuf message bilibili.pgc.gateway.player.v2.Coupon
 */
export interface Coupon {
    /**
     * 优惠券token
     *
     * @generated from protobuf field: string coupon_token = 1;
     */
    couponToken: string;
    /**
     * 优惠券类型
     * 1:折扣券 2:满减券 3:兑换券
     *
     * @generated from protobuf field: int64 type = 2;
     */
    type: bigint;
    /**
     * 优惠券面值
     *
     * @generated from protobuf field: string value = 3;
     */
    value: string;
    /**
     * 优惠券使用描述
     *
     * @generated from protobuf field: string use_desc = 4;
     */
    useDesc: string;
    /**
     * 优惠券标题
     *
     * @generated from protobuf field: string title = 5;
     */
    title: string;
    /**
     * 优惠券描述
     *
     * @generated from protobuf field: string desc = 6;
     */
    desc: string;
    /**
     * 优惠券支付按钮文案
     *
     * @generated from protobuf field: string pay_button_text = 7;
     */
    payButtonText: string;
    /**
     * 优惠券支付按钮删除线文案
     *
     * @generated from protobuf field: string pay_button_text_line_through = 8;
     */
    payButtonTextLineThrough: string;
    /**
     * 实付金额
     *
     * @generated from protobuf field: string real_amount = 9;
     */
    realAmount: string;
    /**
     * 使用过期时间
     *
     * @generated from protobuf field: google.protobuf.Timestamp expire_time = 10;
     */
    expireTime?: Timestamp;
}
/**
 * 优惠券信息
 *
 * @generated from protobuf message bilibili.pgc.gateway.player.v2.CouponInfo
 */
export interface CouponInfo {
    /**
     * 提示框信息
     *
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.CouponToast toast = 1;
     */
    toast?: CouponToast;
    /**
     * 弹窗信息
     *
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.PopWin pop_win = 2;
     */
    popWin?: PopWin;
}
/**
 * 优惠券提示框文案信息
 *
 * @generated from protobuf message bilibili.pgc.gateway.player.v2.CouponTextInfo
 */
export interface CouponTextInfo {
    /**
     * 提示框文案-播正片6分钟预览
     *
     * @generated from protobuf field: string positive_preview = 1;
     */
    positivePreview: string;
    /**
     * 提示框文案-播非正片分节ep
     *
     * @generated from protobuf field: string section = 2;
     */
    section: string;
}
/**
 * 优惠券提示框信息
 *
 * @generated from protobuf message bilibili.pgc.gateway.player.v2.CouponToast
 */
export interface CouponToast {
    /**
     * 提示框文案信息
     *
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.CouponTextInfo text_info = 1;
     */
    textInfo?: CouponTextInfo;
    /**
     * 提示框按钮
     *
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.ButtonInfo button = 2;
     */
    button?: ButtonInfo;
}
/**
 * dash条目
 *
 * @generated from protobuf message bilibili.pgc.gateway.player.v2.DashItem
 */
export interface DashItem {
    /**
     * 清晰度
     *
     * @generated from protobuf field: uint32 id = 1;
     */
    id: number;
    /**
     * 主线流
     *
     * @generated from protobuf field: string base_url = 2;
     */
    baseUrl: string;
    /**
     * 备用流
     *
     * @generated from protobuf field: repeated string backup_url = 3;
     */
    backupUrl: string[];
    /**
     * 带宽
     *
     * @generated from protobuf field: uint32 bandwidth = 4;
     */
    bandwidth: number;
    /**
     * 编码id
     *
     * @generated from protobuf field: uint32 codecid = 5;
     */
    codecid: number;
    /**
     * md5
     *
     * @generated from protobuf field: string md5 = 6;
     */
    md5: string;
    /**
     * 视频大小
     *
     * @generated from protobuf field: uint64 size = 7;
     */
    size: bigint;
    /**
     * 帧率
     *
     * @generated from protobuf field: string frame_rate = 8;
     */
    frameRate: string;
}
/**
 * dash视频流
 *
 * @generated from protobuf message bilibili.pgc.gateway.player.v2.DashVideo
 */
export interface DashVideo {
    /**
     * 主线流
     *
     * @generated from protobuf field: string base_url = 1;
     */
    baseUrl: string;
    /**
     * 备用流
     *
     * @generated from protobuf field: repeated string backup_url = 2;
     */
    backupUrl: string[];
    /**
     * 带宽
     *
     * @generated from protobuf field: uint32 bandwidth = 3;
     */
    bandwidth: number;
    /**
     * 编码id
     *
     * @generated from protobuf field: uint32 codecid = 4;
     */
    codecid: number;
    /**
     * md5
     *
     * @generated from protobuf field: string md5 = 5;
     */
    md5: string;
    /**
     * 大小
     *
     * @generated from protobuf field: uint64 size = 6;
     */
    size: bigint;
    /**
     * 伴音质量id
     *
     * @generated from protobuf field: uint32 audio_id = 7;
     */
    audioId: number;
    /**
     * 是否非全二压
     *
     * @generated from protobuf field: bool no_rexcode = 8;
     */
    noRexcode: boolean;
    /**
     * 帧率
     *
     * @generated from protobuf field: string frame_rate = 9;
     */
    frameRate: string;
    /**
     * 宽
     *
     * @generated from protobuf field: int32 width = 10;
     */
    width: number;
    /**
     * 高
     *
     * @generated from protobuf field: int32 height = 11;
     */
    height: number;
}
/**
 * 鉴权浮层
 *
 * @generated from protobuf message bilibili.pgc.gateway.player.v2.Dialog
 */
export interface Dialog {
    /**
     * 鉴权限制码
     *
     * @generated from protobuf field: int64 code = 1;
     */
    code: bigint;
    /**
     * 鉴权限制信息
     *
     * @generated from protobuf field: string msg = 2;
     */
    msg: string;
    /**
     * 浮层类型
     *
     * @generated from protobuf field: string type = 3;
     */
    type: string;
    /**
     * 浮层样式类型
     *
     * @generated from protobuf field: string style_type = 4;
     */
    styleType: string;
    /**
     * 浮层配置
     *
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.DialogConfig config = 5;
     */
    config?: DialogConfig;
    /**
     * 标题
     *
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.TextInfo title = 6;
     */
    title?: TextInfo;
    /**
     * 副标题
     *
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.TextInfo subtitle = 7;
     */
    subtitle?: TextInfo;
    /**
     * 图片信息
     *
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.ImageInfo image = 8;
     */
    image?: ImageInfo;
    /**
     * 按钮列表
     *
     * @generated from protobuf field: repeated bilibili.pgc.gateway.player.v2.ButtonInfo button = 9;
     */
    button: ButtonInfo[];
    /**
     * 底部描述
     *
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.ButtonInfo bottom_desc = 10;
     */
    bottomDesc?: ButtonInfo;
    /**
     * 埋点上报信息
     *
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.Report report = 11;
     */
    report?: Report;
    /**
     * 倒计时 秒
     *
     * @generated from protobuf field: int32 count_down_sec = 12;
     */
    countDownSec: number;
    /**
     * 右下描述
     *
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.TextInfo right_bottom_desc = 13;
     */
    rightBottomDesc?: TextInfo;
    /**
     * @generated from protobuf field: repeated bilibili.pgc.gateway.player.v2.BottomDisplay bottom_display = 14;
     */
    bottomDisplay: BottomDisplay[];
}
/**
 * 鉴权浮层配置
 *
 * @generated from protobuf message bilibili.pgc.gateway.player.v2.DialogConfig
 */
export interface DialogConfig {
    /**
     * 是否显示高斯模糊背景图
     *
     * @generated from protobuf field: bool is_show_cover = 1;
     */
    isShowCover: boolean;
    /**
     * 是否响应转屏
     *
     * @generated from protobuf field: bool is_orientation_enable = 2;
     */
    isOrientationEnable: boolean;
    /**
     * 是否响应上滑吸顶
     *
     * @generated from protobuf field: bool is_nested_scroll_enable = 3;
     */
    isNestedScrollEnable: boolean;
    /**
     * 是否强制竖屏
     *
     * @generated from protobuf field: bool is_force_halfscreen_enable = 4;
     */
    isForceHalfscreenEnable: boolean;
}
/**
 * 当前分辨率信息
 *
 * @generated from protobuf message bilibili.pgc.gateway.player.v2.Dimension
 */
export interface Dimension {
    /**
     * 宽
     *
     * @generated from protobuf field: int32 width = 1;
     */
    width: number;
    /**
     * 长
     *
     * @generated from protobuf field: int32 height = 2;
     */
    height: number;
    /**
     * 旋转角度
     *
     * @generated from protobuf field: int32 rotate = 3;
     */
    rotate: number;
}
/**
 * 杜比音频信息
 *
 * @generated from protobuf message bilibili.pgc.gateway.player.v2.DolbyItem
 */
export interface DolbyItem {
    /**
     * 杜比类型
     *
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.DolbyItem.Type type = 1;
     */
    type: DolbyItem_Type;
    /**
     * 音频流
     *
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.DashItem audio = 2;
     */
    audio?: DashItem;
}
/**
 * 杜比类型
 *
 * @generated from protobuf enum bilibili.pgc.gateway.player.v2.DolbyItem.Type
 */
export enum DolbyItem_Type {
    /**
     * NONE
     *
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * 普通杜比音效
     *
     * @generated from protobuf enum value: COMMON = 1;
     */
    COMMON = 1,
    /**
     * 全景杜比音效
     *
     * @generated from protobuf enum value: ATMOS = 2;
     */
    ATMOS = 2
}
/**
 * 播放结束页
 *
 * @generated from protobuf message bilibili.pgc.gateway.player.v2.EndPage
 */
export interface EndPage {
    /**
     * 鉴权浮层
     *
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.Dialog dialog = 1;
     */
    dialog?: Dialog;
    /**
     * 播放完后是否隐藏end_page
     *
     * @generated from protobuf field: bool hide = 2;
     */
    hide: boolean;
}
/**
 * 事件
 *
 * @generated from protobuf message bilibili.pgc.gateway.player.v2.Event
 */
export interface Event {
    /**
     * 震动
     *
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.Shake shake = 1;
     */
    shake?: Shake;
}
/**
 * ? 放映室提示语
 *
 * @generated from protobuf message bilibili.pgc.gateway.player.v2.FreyaConfig
 */
export interface FreyaConfig {
    /**
     * @generated from protobuf field: string desc = 1;
     */
    desc: string;
    /**
     * @generated from protobuf field: int32 type = 2;
     */
    type: number;
    /**
     * @generated from protobuf field: int32 issued_cnt = 3;
     */
    issuedCnt: number;
    /**
     * @generated from protobuf field: bool is_always_show = 4;
     */
    isAlwaysShow: boolean;
    /**
     * @generated from protobuf field: int32 screen_number = 5;
     */
    screenNumber: number;
    /**
     * @generated from protobuf field: int32 full_screen_number = 6;
     */
    fullScreenNumber: number;
}
/**
 * 渐变色信息
 *
 * @generated from protobuf message bilibili.pgc.gateway.player.v2.GradientColor
 */
export interface GradientColor {
    /**
     * @generated from protobuf field: string start_color = 1;
     */
    startColor: string;
    /**
     * @generated from protobuf field: string end_color = 2;
     */
    endColor: string;
}
/**
 * 高画质试看信息
 *
 * @generated from protobuf message bilibili.pgc.gateway.player.v2.HighDefinitionTrialInfo
 */
export interface HighDefinitionTrialInfo {
    /**
     * @generated from protobuf field: bool trial_able = 1;
     */
    trialAble: boolean;
    /**
     * @generated from protobuf field: int32 remaining_times = 2;
     */
    remainingTimes: number;
    /**
     * @generated from protobuf field: int32 start = 3;
     */
    start: number;
    /**
     * @generated from protobuf field: int32 time_length = 4;
     */
    timeLength: number;
    /**
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.Toast start_toast = 5;
     */
    startToast?: Toast;
    /**
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.Toast end_toast = 6;
     */
    endToast?: Toast;
    /**
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.Report report = 7;
     */
    report?: Report;
    /**
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.ButtonInfo quality_open_tip_btn = 8;
     */
    qualityOpenTipBtn?: ButtonInfo;
    /**
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.ButtonInfo no_longer_trial_btn = 9;
     */
    noLongerTrialBtn?: ButtonInfo;
}
/**
 * 图片信息
 *
 * @generated from protobuf message bilibili.pgc.gateway.player.v2.ImageInfo
 */
export interface ImageInfo {
    /**
     * 图片链接
     *
     * @generated from protobuf field: string url = 1;
     */
    url: string;
}
/**
 * @generated from protobuf message bilibili.pgc.gateway.player.v2.MultiView
 */
export interface MultiView {
    /**
     * @generated from protobuf field: string button_material = 1;
     */
    buttonMaterial: string;
    /**
     * @generated from protobuf field: int64 ep_id = 2;
     */
    epId: bigint;
    /**
     * @generated from protobuf field: int64 cid = 3;
     */
    cid: bigint;
    /**
     * @generated from protobuf field: int64 avid = 4;
     */
    avid: bigint;
}
/**
 * 大会员广告: 支付提示信息
 *
 * @generated from protobuf message bilibili.pgc.gateway.player.v2.PayTip
 */
export interface PayTip {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * @generated from protobuf field: string url = 2;
     */
    url: string;
    /**
     * @generated from protobuf field: string icon = 3;
     */
    icon: string;
    /**
     * @generated from protobuf field: int32 type = 4;
     */
    type: number;
    /**
     * @generated from protobuf field: int32 show_type = 5;
     */
    showType: number;
    /**
     * @generated from protobuf field: string img = 6;
     */
    img: string;
    /**
     * @generated from protobuf field: string bg_day_color = 7;
     */
    bgDayColor: string;
    /**
     * @generated from protobuf field: string bg_night_color = 8;
     */
    bgNightColor: string;
    /**
     * @generated from protobuf field: string bg_line_color = 9;
     */
    bgLineColor: string;
    /**
     * @generated from protobuf field: string bg_night_line_color = 10;
     */
    bgNightLineColor: string;
    /**
     * @generated from protobuf field: string text_color = 11;
     */
    textColor: string;
    /**
     * @generated from protobuf field: string text_night_color = 12;
     */
    textNightColor: string;
    /**
     * @generated from protobuf field: int64 view_start_time = 13;
     */
    viewStartTime: bigint;
    /**
     * @generated from protobuf field: repeated bilibili.pgc.gateway.player.v2.ButtonInfo button = 14;
     */
    button: ButtonInfo[];
    /**
     * @generated from protobuf field: int32 url_open_type = 15;
     */
    urlOpenType: number;
    /**
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.Report report = 16;
     */
    report?: Report;
    /**
     * @generated from protobuf field: int32 angle_style = 17;
     */
    angleStyle: number;
    /**
     * @generated from protobuf field: int32 report_type = 18;
     */
    reportType: number;
    /**
     * @generated from protobuf field: map<string, string> order_report_params = 19;
     */
    orderReportParams: {
        [key: string]: string;
    };
}
/**
 * 禁用功能配置
 *
 * @generated from protobuf message bilibili.pgc.gateway.player.v2.PlayAbilityConf
 */
export interface PlayAbilityConf {
    /**
     * @generated from protobuf field: bool background_play_disable = 1;
     */
    backgroundPlayDisable: boolean; // 后台播放
    /**
     * @generated from protobuf field: bool flip_disable = 2;
     */
    flipDisable: boolean; // 镜像反转
    /**
     * @generated from protobuf field: bool cast_disable = 3;
     */
    castDisable: boolean; // 投屏
    /**
     * @generated from protobuf field: bool feedback_disable = 4;
     */
    feedbackDisable: boolean; // 反馈
    /**
     * @generated from protobuf field: bool subtitle_disable = 5;
     */
    subtitleDisable: boolean; // 字幕
    /**
     * @generated from protobuf field: bool playback_rate_disable = 6;
     */
    playbackRateDisable: boolean; // 播放速度
    /**
     * @generated from protobuf field: bool time_up_disable = 7;
     */
    timeUpDisable: boolean; // 定时停止
    /**
     * @generated from protobuf field: bool playback_mode_disable = 8;
     */
    playbackModeDisable: boolean; // 播放方式
    /**
     * @generated from protobuf field: bool scale_mode_disable = 9;
     */
    scaleModeDisable: boolean; // 画面尺寸
    /**
     * @generated from protobuf field: bool like_disable = 10;
     */
    likeDisable: boolean; // 赞
    /**
     * @generated from protobuf field: bool dislike_disable = 11;
     */
    dislikeDisable: boolean; // 踩
    /**
     * @generated from protobuf field: bool coin_disable = 12;
     */
    coinDisable: boolean; // 投币
    /**
     * @generated from protobuf field: bool elec_disable = 13;
     */
    elecDisable: boolean; // 充电
    /**
     * @generated from protobuf field: bool share_disable = 14;
     */
    shareDisable: boolean; // 分享
    /**
     * @generated from protobuf field: bool screen_shot_disable = 15;
     */
    screenShotDisable: boolean; // 截图
    /**
     * @generated from protobuf field: bool lock_screen_disable = 16;
     */
    lockScreenDisable: boolean; // 锁定
    /**
     * @generated from protobuf field: bool recommend_disable = 17;
     */
    recommendDisable: boolean; // 相关推荐
    /**
     * @generated from protobuf field: bool playback_speed_disable = 18;
     */
    playbackSpeedDisable: boolean; // 播放速度
    /**
     * @generated from protobuf field: bool definition_disable = 19;
     */
    definitionDisable: boolean; // 清晰度
    /**
     * @generated from protobuf field: bool selections_disable = 20;
     */
    selectionsDisable: boolean; // 选集
    /**
     * @generated from protobuf field: bool next_disable = 21;
     */
    nextDisable: boolean; // 下一集
    /**
     * @generated from protobuf field: bool edit_dm_disable = 22;
     */
    editDmDisable: boolean; // 编辑弹幕
    /**
     * @generated from protobuf field: bool small_window_disable = 23;
     */
    smallWindowDisable: boolean; // 小窗
    /**
     * @generated from protobuf field: bool shake_disable = 24;
     */
    shakeDisable: boolean; // 震动
    /**
     * @generated from protobuf field: bool outer_dm_disable = 25;
     */
    outerDmDisable: boolean; // 外层面板弹幕设置
    /**
     * @generated from protobuf field: bool inner_dm_disable = 26;
     */
    innerDmDisable: boolean; // 三点内弹幕设置
    /**
     * @generated from protobuf field: bool freya_enter_disable = 27;
     */
    freyaEnterDisable: boolean; // 一起看入口
    /**
     * @generated from protobuf field: bool dolby_disable = 28;
     */
    dolbyDisable: boolean; // 杜比音效
    /**
     * @generated from protobuf field: bool freya_full_disable = 29;
     */
    freyaFullDisable: boolean; // 全屏一起看入口
    /**
     * @generated from protobuf field: bool skip_oped_switch_disable = 30;
     */
    skipOpedSwitchDisable: boolean;
    /**
     * @generated from protobuf field: bool record_screen_disable = 31;
     */
    recordScreenDisable: boolean;
    /**
     * @generated from protobuf field: bool color_optimize_disable = 32;
     */
    colorOptimizeDisable: boolean;
}
/**
 * 云控扩展配置信息
 *
 * @generated from protobuf message bilibili.pgc.gateway.player.v2.PlayAbilityExtConf
 */
export interface PlayAbilityExtConf {
    /**
     * 自定义配置扩展信息
     *
     * @generated from protobuf field: bool allow_close_subtitle = 1;
     */
    allowCloseSubtitle: boolean;
    /**
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.FreyaConfig freya_config = 2;
     */
    freyaConfig?: FreyaConfig;
    /**
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.CastTips cast_tips = 3;
     */
    castTips?: CastTips;
}
/**
 * 其他业务信息
 *
 * @generated from protobuf message bilibili.pgc.gateway.player.v2.PlayViewBusinessInfo
 */
export interface PlayViewBusinessInfo {
    /**
     * 当前视频是否是预览
     *
     * @generated from protobuf field: bool is_preview = 1;
     */
    isPreview: boolean;
    /**
     * 用户是否承包过
     *
     * @generated from protobuf field: bool bp = 2;
     */
    bp: boolean;
    /**
     * drm使用
     *
     * @generated from protobuf field: string marlin_token = 3;
     */
    marlinToken: string;
    /**
     * 倍速动效色值
     *
     * @generated from protobuf field: string playback_speed_color = 4;
     */
    playbackSpeedColor: string;
    /**
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.ContinuePlayInfo continue_play_info = 5;
     */
    continuePlayInfo?: ContinuePlayInfo;
    /**
     * 跳过片头/片尾配置
     *
     * @generated from protobuf field: repeated bilibili.pgc.gateway.player.v2.ClipInfo clip_info = 6;
     */
    clipInfo: ClipInfo[];
    /**
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.InlineType inline_type = 7;
     */
    inlineType: InlineType;
    /**
     * @generated from protobuf field: int32 ep_whole_duration = 8;
     */
    epWholeDuration: number;
    /**
     * 当前分辨率信息
     *
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.Dimension dimension = 9;
     */
    dimension?: Dimension;
    /**
     * @generated from protobuf field: map<int32, bilibili.pgc.gateway.player.v2.QualityExtInfo> quality_ext_map = 10;
     */
    qualityExtMap: {
        [key: number]: QualityExtInfo;
    };
    /**
     * @generated from protobuf field: map<string, int32> exp_map = 11;
     */
    expMap: {
        [key: string]: number;
    };
    /**
     * DRM技术类型
     *
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.DrmTechType drm_tech_type = 12;
     */
    drmTechType: DrmTechType;
}
/**
 * 播放页信息-响应
 *
 * @generated from protobuf message bilibili.pgc.gateway.player.v2.PlayViewReply
 */
export interface PlayViewReply {
    /**
     * 视频流信息
     *
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.VideoInfo video_info = 1;
     */
    videoInfo?: VideoInfo;
    /**
     * 播放控件用户自定义配置
     *
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.PlayAbilityConf play_conf = 2;
     */
    playConf?: PlayAbilityConf;
    /**
     * 业务需要的其他信息
     *
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.PlayViewBusinessInfo business = 3;
     */
    business?: PlayViewBusinessInfo;
    /**
     * 事件
     *
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.Event event = 4;
     */
    event?: Event;
    /**
     * 展示信息
     *
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.ViewInfo view_info = 5;
     */
    viewInfo?: ViewInfo;
    /**
     * 自定义配置扩展信息
     *
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.PlayAbilityExtConf play_ext_conf = 6;
     */
    playExtConf?: PlayAbilityExtConf;
}
/**
 * 播放页信息-请求
 *
 * @generated from protobuf message bilibili.pgc.gateway.player.v2.PlayViewReq
 */
export interface PlayViewReq {
    /**
     * 剧集epid
     *
     * @generated from protobuf field: int64 epid = 1;
     */
    epid: bigint;
    /**
     * 视频cid
     *
     * @generated from protobuf field: int64 cid = 2;
     */
    cid: bigint;
    /**
     * 清晰度
     *
     * @generated from protobuf field: int64 qn = 3;
     */
    qn: bigint;
    /**
     * 视频流版本
     *
     * @generated from protobuf field: int32 fnver = 4;
     */
    fnver: number;
    /**
     * 视频流格式
     *
     * @generated from protobuf field: int32 fnval = 5;
     */
    fnval: number;
    /**
     * 下载模式
     * 0:播放 1:flv下载 2:dash下载
     *
     * @generated from protobuf field: uint32 download = 6;
     */
    download: number;
    /**
     * 流url强制是用域名
     * 0:允许使用ip 1:使用http 2:使用https
     *
     * @generated from protobuf field: int32 force_host = 7;
     */
    forceHost: number;
    /**
     * 是否4K
     *
     * @generated from protobuf field: bool fourk = 8;
     */
    fourk: boolean;
    /**
     * 当前页spm
     *
     * @generated from protobuf field: string spmid = 9;
     */
    spmid: string;
    /**
     * 上一页spm
     *
     * @generated from protobuf field: string from_spmid = 10;
     */
    fromSpmid: string;
    /**
     * 青少年模式
     *
     * @generated from protobuf field: int32 teenagers_mode = 11;
     */
    teenagersMode: number;
    /**
     * 视频编码
     *
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.CodeType prefer_codec_type = 12;
     */
    preferCodecType: CodeType;
    /**
     * 是否强制请求预览视频
     *
     * @generated from protobuf field: bool is_preview = 13;
     */
    isPreview: boolean;
    /**
     * 一起看房间id
     *
     * @generated from protobuf field: int64 room_id = 14;
     */
    roomId: bigint;
    /**
     * 是否需要展示信息
     *
     * @generated from protobuf field: bool is_need_view_info = 15;
     */
    isNeedViewInfo: boolean;
    /**
     * 场景控制
     *
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.SceneControl scene_control = 16;
     */
    sceneControl?: SceneControl;
    /**
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.InlineScene inline_scene = 17;
     */
    inlineScene: InlineScene;
    /**
     * @generated from protobuf field: int64 material_no = 18;
     */
    materialNo: bigint;
}
/**
 * 弹窗信息
 *
 * @generated from protobuf message bilibili.pgc.gateway.player.v2.PopWin
 */
export interface PopWin {
    /**
     * 弹窗标题 老字段
     *
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * 优惠券列表
     *
     * @generated from protobuf field: repeated bilibili.pgc.gateway.player.v2.Coupon coupon = 2;
     */
    coupon: Coupon[];
    /**
     * 弹窗按钮列表
     *
     * @generated from protobuf field: repeated bilibili.pgc.gateway.player.v2.ButtonInfo button = 3;
     */
    button: ButtonInfo[];
    /**
     * 底部文案 老字段
     *
     * @generated from protobuf field: string bottom_text = 4;
     */
    bottomText: string;
    /**
     * 弹窗标题 新字段
     *
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.TextInfo pop_title = 5;
     */
    popTitle?: TextInfo;
    /**
     * 弹窗副标题
     *
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.TextInfo subtitle = 6;
     */
    subtitle?: TextInfo;
    /**
     * 底部描述 新字段
     *
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.ButtonInfo bottom_desc = 7;
     */
    bottomDesc?: ButtonInfo;
    /**
     * 弹窗小图
     *
     * @generated from protobuf field: string cover = 8;
     */
    cover: string;
    /**
     * 弹窗类型
     *
     * @generated from protobuf field: string pop_type = 9;
     */
    popType: string;
}
/**
 * 广告组件: 竖屏时视频下部提示栏
 *
 * @generated from protobuf message bilibili.pgc.gateway.player.v2.PromptBar
 */
export interface PromptBar {
    /**
     * 主标题, 如: "本片含大会员专享内容"
     *
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.TextInfo title = 1;
     */
    title?: TextInfo;
    /**
     * 副标题, 如: "成为大会员可免费看全部剧集"
     *
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.TextInfo sub_title = 2;
     */
    subTitle?: TextInfo;
    /**
     * 副标题前面的icon
     *
     * @generated from protobuf field: string sub_title_icon = 3;
     */
    subTitleIcon: string;
    /**
     * 背景图
     *
     * @generated from protobuf field: string bg_image = 4;
     */
    bgImage: string;
    /**
     * 背景渐变色
     *
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.GradientColor bg_gradient_color = 5;
     */
    bgGradientColor?: GradientColor;
    /**
     * 按钮
     *
     * @generated from protobuf field: repeated bilibili.pgc.gateway.player.v2.ButtonInfo button = 6;
     */
    button: ButtonInfo[];
    /**
     * 埋点上报信息
     *
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.Report report = 7;
     */
    report?: Report;
    /**
     * @generated from protobuf field: string full_screen_ip_icon = 8;
     */
    fullScreenIpIcon: string;
    /**
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.GradientColor full_screen_bg_gradient_color = 9;
     */
    fullScreenBgGradientColor?: GradientColor;
}
/**
 * 云控拓展视频画质信息
 *
 * @generated from protobuf message bilibili.pgc.gateway.player.v2.QualityExtInfo
 */
export interface QualityExtInfo {
    /**
     * 是否支持试看
     *
     * @generated from protobuf field: bool trial_support = 1;
     */
    trialSupport: boolean;
}
/**
 * 埋点上报信息
 *
 * @generated from protobuf message bilibili.pgc.gateway.player.v2.Report
 */
export interface Report {
    /**
     * 曝光事件
     *
     * @generated from protobuf field: string show_event_id = 1;
     */
    showEventId: string;
    /**
     * 点击事件
     *
     * @generated from protobuf field: string click_event_id = 2;
     */
    clickEventId: string;
    /**
     * 埋点透传参数
     *
     * @generated from protobuf field: string extends = 3;
     */
    extends: string;
}
/**
 * 分段流条目
 *
 * @generated from protobuf message bilibili.pgc.gateway.player.v2.ResponseUrl
 */
export interface ResponseUrl {
    /**
     * 分段序号
     *
     * @generated from protobuf field: uint32 order = 1;
     */
    order: number;
    /**
     * 分段时长
     *
     * @generated from protobuf field: uint64 length = 2;
     */
    length: bigint;
    /**
     * 分段大小
     *
     * @generated from protobuf field: uint64 size = 3;
     */
    size: bigint;
    /**
     * 主线流
     *
     * @generated from protobuf field: string url = 4;
     */
    url: string;
    /**
     * 备用流
     *
     * @generated from protobuf field: repeated string backup_url = 5;
     */
    backupUrl: string[];
    /**
     * md5
     *
     * @generated from protobuf field: string md5 = 6;
     */
    md5: string;
}
/**
 * 场景控制
 *
 * @generated from protobuf message bilibili.pgc.gateway.player.v2.SceneControl
 */
export interface SceneControl {
    /**
     * 是否收藏播单
     *
     * @generated from protobuf field: bool fav_playlist = 1;
     */
    favPlaylist: boolean;
    /**
     * 是否小窗
     *
     * @generated from protobuf field: bool small_window = 2;
     */
    smallWindow: boolean;
    /**
     * 是否画中画
     *
     * @generated from protobuf field: bool pip = 3;
     */
    pip: boolean;
    /**
     * @generated from protobuf field: bool was_he_inline = 4;
     */
    wasHeInline: boolean;
    /**
     * @generated from protobuf field: bool is_need_trial = 5;
     */
    isNeedTrial: boolean;
}
/**
 * 分段视频流
 *
 * @generated from protobuf message bilibili.pgc.gateway.player.v2.SegmentVideo
 */
export interface SegmentVideo {
    /**
     * 分段视频流列表
     *
     * @generated from protobuf field: repeated bilibili.pgc.gateway.player.v2.ResponseUrl segment = 1;
     */
    segment: ResponseUrl[];
}
/**
 * 震动
 *
 * @generated from protobuf message bilibili.pgc.gateway.player.v2.Shake
 */
export interface Shake {
    /**
     * 文件地址
     *
     * @generated from protobuf field: string file = 1;
     */
    file: string;
}
/**
 * 视频流信息
 *
 * @generated from protobuf message bilibili.pgc.gateway.player.v2.Stream
 */
export interface Stream {
    /**
     * 元数据
     *
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.StreamInfo info = 1;
     */
    info?: StreamInfo;
    /**
     * @generated from protobuf oneof: content
     */
    content: {
        oneofKind: "dashVideo";
        /**
         * dash流
         *
         * @generated from protobuf field: bilibili.pgc.gateway.player.v2.DashVideo dash_video = 2;
         */
        dashVideo: DashVideo;
    } | {
        oneofKind: "segmentVideo";
        /**
         * 分段流
         *
         * @generated from protobuf field: bilibili.pgc.gateway.player.v2.SegmentVideo segment_video = 3;
         */
        segmentVideo: SegmentVideo;
    } | {
        oneofKind: undefined;
    };
}
/**
 * 流媒体元数据
 *
 * @generated from protobuf message bilibili.pgc.gateway.player.v2.StreamInfo
 */
export interface StreamInfo {
    /**
     * 清晰度
     *
     * @generated from protobuf field: uint32 quality = 1;
     */
    quality: number;
    /**
     * 格式
     *
     * @generated from protobuf field: string format = 2;
     */
    format: string;
    /**
     * 格式描述
     *
     * @generated from protobuf field: string description = 3;
     */
    description: string;
    /**
     * 错误码
     *
     * @generated from protobuf field: uint32 err_code = 4;
     */
    errCode: number;
    /**
     * 不满足条件信息
     *
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.StreamLimit limit = 5;
     */
    limit?: StreamLimit;
    /**
     * 是否需要vip
     *
     * @generated from protobuf field: bool need_vip = 6;
     */
    needVip: boolean;
    /**
     * 是否需要登录
     *
     * @generated from protobuf field: bool need_login = 7;
     */
    needLogin: boolean;
    /**
     * 是否完整
     *
     * @generated from protobuf field: bool intact = 8;
     */
    intact: boolean;
    /**
     * 是否非全二压
     *
     * @generated from protobuf field: bool no_rexcode = 9;
     */
    noRexcode: boolean;
    /**
     * 清晰度属性位
     *
     * @generated from protobuf field: int64 attribute = 10;
     */
    attribute: bigint;
    /**
     * 新版格式描述
     *
     * @generated from protobuf field: string new_description = 11;
     */
    newDescription: string;
    /**
     * 格式文字
     *
     * @generated from protobuf field: string display_desc = 12;
     */
    displayDesc: string;
    /**
     * 新版格式描述备注
     *
     * @generated from protobuf field: string superscript = 13;
     */
    superscript: string;
}
/**
 * 清晰度不满足条件信息
 *
 * @generated from protobuf message bilibili.pgc.gateway.player.v2.StreamLimit
 */
export interface StreamLimit {
    /**
     * 标题
     *
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * 跳转地址
     *
     * @generated from protobuf field: string uri = 2;
     */
    uri: string;
    /**
     * 提示信息
     *
     * @generated from protobuf field: string msg = 3;
     */
    msg: string;
}
/**
 * 文案信息
 *
 * @generated from protobuf message bilibili.pgc.gateway.player.v2.TextInfo
 */
export interface TextInfo {
    /**
     * 文案
     *
     * @generated from protobuf field: string text = 1;
     */
    text: string;
    /**
     * 字体色值
     *
     * @generated from protobuf field: string textColor = 2;
     */
    textColor: string;
    /**
     * 字体色值-夜间模式
     *
     * @generated from protobuf field: string textColorNight = 3;
     */
    textColorNight: string;
}
/**
 * toast
 *
 * @generated from protobuf message bilibili.pgc.gateway.player.v2.Toast
 */
export interface Toast {
    /**
     * toast文案 老字段
     *
     * @generated from protobuf field: string text = 1;
     */
    text: string;
    /**
     * toast按钮
     *
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.ButtonInfo button = 2;
     */
    button?: ButtonInfo;
    /**
     * 显示样式类型
     *
     * @generated from protobuf field: int32 show_style_type = 3;
     */
    showStyleType: number;
    /**
     * 图标
     *
     * @generated from protobuf field: string icon = 4;
     */
    icon: string;
    /**
     * toast文案 新字段
     *
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.TextInfo toast_text = 5;
     */
    toastText?: TextInfo;
    /**
     * 埋点上报信息
     *
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.Report report = 6;
     */
    report?: Report;
    /**
     * @generated from protobuf field: map<string, string> order_report_params = 7;
     */
    orderReportParams: {
        [key: string]: string;
    };
}
/**
 * 视频url信息
 *
 * @generated from protobuf message bilibili.pgc.gateway.player.v2.VideoInfo
 */
export interface VideoInfo {
    /**
     * 视频清晰度
     *
     * @generated from protobuf field: uint32 quality = 1;
     */
    quality: number;
    /**
     * 视频格式
     *
     * @generated from protobuf field: string format = 2;
     */
    format: string;
    /**
     * 视频时长
     *
     * @generated from protobuf field: uint64 timelength = 3;
     */
    timelength: bigint;
    /**
     * 视频编码id
     *
     * @generated from protobuf field: uint32 video_codecid = 4;
     */
    videoCodecid: number;
    /**
     * 视频流
     *
     * @generated from protobuf field: repeated bilibili.pgc.gateway.player.v2.Stream stream_list = 5;
     */
    streamList: Stream[];
    /**
     * 伴音流
     *
     * @generated from protobuf field: repeated bilibili.pgc.gateway.player.v2.DashItem dash_audio = 6;
     */
    dashAudio: DashItem[];
    /**
     * 杜比伴音流
     *
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.DolbyItem dolby = 7;
     */
    dolby?: DolbyItem;
}
/**
 * 展示信息
 *
 * @generated from protobuf message bilibili.pgc.gateway.player.v2.ViewInfo
 */
export interface ViewInfo {
    /**
     * 鉴权浮层
     *
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.Dialog dialog = 1;
     */
    dialog?: Dialog;
    /**
     * toast
     *
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.Toast toast = 2;
     */
    toast?: Toast;
    /**
     * 优惠券信息
     *
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.CouponInfo coupon_info = 3;
     */
    couponInfo?: CouponInfo;
    /**
     * 未购买的超前点播ep列表
     *
     * @generated from protobuf field: repeated int64 demand_no_pay_epids = 4;
     */
    demandNoPayEpids: bigint[];
    /**
     * 播放结束页
     *
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.EndPage end_page = 5;
     */
    endPage?: EndPage;
    /**
     * @generated from protobuf field: map<string, bool> exp_config = 6;
     */
    expConfig: {
        [key: string]: boolean;
    };
    /**
     * 弹窗
     *
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.PopWin pop_win = 7;
     */
    popWin?: PopWin;
    /**
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.PromptBar try_watch_prompt_bar = 8;
     */
    tryWatchPromptBar?: PromptBar;
    /**
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.PayTip pay_tip = 9;
     */
    payTip?: PayTip;
    /**
     * @generated from protobuf field: bilibili.pgc.gateway.player.v2.HighDefinitionTrialInfo high_definition_trial_info = 10;
     */
    highDefinitionTrialInfo?: HighDefinitionTrialInfo;
    /**
     * @generated from protobuf field: map<string, bilibili.pgc.gateway.player.v2.Dialog> ext_dialog = 11;
     */
    extDialog: {
        [key: string]: Dialog;
    };
}
/**
 * 跳过片头/片尾配置: Clip类型
 *
 * @generated from protobuf enum bilibili.pgc.gateway.player.v2.ClipType
 */
export enum ClipType {
    /**
     * @generated from protobuf enum value: NT_UNKNOWN = 0;
     */
    NT_UNKNOWN = 0,
    /**
     * 跳过OP
     *
     * @generated from protobuf enum value: CLIP_TYPE_OP = 1;
     */
    CLIP_TYPE_OP = 1,
    /**
     * 跳过ED
     *
     * @generated from protobuf enum value: CLIP_TYPE_ED = 2;
     */
    CLIP_TYPE_ED = 2,
    /**
     * @generated from protobuf enum value: CLIP_TYPE_HE = 3;
     */
    CLIP_TYPE_HE = 3,
    /**
     * @generated from protobuf enum value: CLIP_TYPE_MULTI_VIEW = 4;
     */
    CLIP_TYPE_MULTI_VIEW = 4
}
/**
 * 编码类型
 *
 * @generated from protobuf enum bilibili.pgc.gateway.player.v2.CodeType
 */
export enum CodeType {
    /**
     * 默认
     *
     * @generated from protobuf enum value: NOCODE = 0;
     */
    NOCODE = 0,
    /**
     * H.264
     *
     * @generated from protobuf enum value: CODE264 = 1;
     */
    CODE264 = 1,
    /**
     * H.265
     *
     * @generated from protobuf enum value: CODE265 = 2;
     */
    CODE265 = 2
}
/**
 * DRM技术类型
 *
 * @generated from protobuf enum bilibili.pgc.gateway.player.v2.DrmTechType
 */
export enum DrmTechType {
    /**
     * @generated from protobuf enum value: NON = 0;
     */
    NON = 0,
    /**
     * @generated from protobuf enum value: FAIR_PLAY = 1;
     */
    FAIR_PLAY = 1
}
/**
 * @generated from protobuf enum bilibili.pgc.gateway.player.v2.InlineScene
 */
export enum InlineScene {
    /**
     * @generated from protobuf enum value: UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: RELATED_EP = 1;
     */
    RELATED_EP = 1,
    /**
     * @generated from protobuf enum value: HE = 2;
     */
    HE = 2,
    /**
     * @generated from protobuf enum value: SKIP = 3;
     */
    SKIP = 3
}
/**
 * @generated from protobuf enum bilibili.pgc.gateway.player.v2.InlineType
 */
export enum InlineType {
    /**
     * @generated from protobuf enum value: TYPE_UNKNOWN = 0;
     */
    TYPE_UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: TYPE_WHOLE = 1;
     */
    TYPE_WHOLE = 1,
    /**
     * @generated from protobuf enum value: TYPE_HE_CLIP = 2;
     */
    TYPE_HE_CLIP = 2,
    /**
     * @generated from protobuf enum value: TYPE_PREVIEW = 3;
     */
    TYPE_PREVIEW = 3
}
/**
 * 错误码
 *
 * @generated from protobuf enum bilibili.pgc.gateway.player.v2.PlayErr
 */
export enum PlayErr {
    /**
     * @generated from protobuf enum value: NoErr = 0;
     */
    NoErr = 0,
    /**
     * 管控类型的错误码
     *
     * @generated from protobuf enum value: WithMultiDeviceLoginErr = 1;
     */
    WithMultiDeviceLoginErr = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class BadgeInfo$Type extends MessageType<BadgeInfo> {
    constructor() {
        super("bilibili.pgc.gateway.player.v2.BadgeInfo", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "bg_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "bg_color_night", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "text_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "bg_gradient_color", kind: "message", T: () => GradientColor }
        ]);
    }
    create(value?: PartialMessage<BadgeInfo>): BadgeInfo {
        const message = { text: "", bgColor: "", bgColorNight: "", textColor: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BadgeInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BadgeInfo): BadgeInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                case /* string bg_color */ 2:
                    message.bgColor = reader.string();
                    break;
                case /* string bg_color_night */ 3:
                    message.bgColorNight = reader.string();
                    break;
                case /* string text_color */ 4:
                    message.textColor = reader.string();
                    break;
                case /* bilibili.pgc.gateway.player.v2.GradientColor bg_gradient_color */ 5:
                    message.bgGradientColor = GradientColor.internalBinaryRead(reader, reader.uint32(), options, message.bgGradientColor);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BadgeInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        /* string bg_color = 2; */
        if (message.bgColor !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.bgColor);
        /* string bg_color_night = 3; */
        if (message.bgColorNight !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.bgColorNight);
        /* string text_color = 4; */
        if (message.textColor !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.textColor);
        /* bilibili.pgc.gateway.player.v2.GradientColor bg_gradient_color = 5; */
        if (message.bgGradientColor)
            GradientColor.internalBinaryWrite(message.bgGradientColor, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.pgc.gateway.player.v2.BadgeInfo
 */
export const BadgeInfo = new BadgeInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BottomDisplay$Type extends MessageType<BottomDisplay> {
    constructor() {
        super("bilibili.pgc.gateway.player.v2.BottomDisplay", [
            { no: 1, name: "title", kind: "message", T: () => TextInfo },
            { no: 2, name: "icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BottomDisplay>): BottomDisplay {
        const message = { icon: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BottomDisplay>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BottomDisplay): BottomDisplay {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.pgc.gateway.player.v2.TextInfo title */ 1:
                    message.title = TextInfo.internalBinaryRead(reader, reader.uint32(), options, message.title);
                    break;
                case /* string icon */ 2:
                    message.icon = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BottomDisplay, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bilibili.pgc.gateway.player.v2.TextInfo title = 1; */
        if (message.title)
            TextInfo.internalBinaryWrite(message.title, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string icon = 2; */
        if (message.icon !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.icon);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.pgc.gateway.player.v2.BottomDisplay
 */
export const BottomDisplay = new BottomDisplay$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ButtonInfo$Type extends MessageType<ButtonInfo> {
    constructor() {
        super("bilibili.pgc.gateway.player.v2.ButtonInfo", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "text_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "text_color_night", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "bg_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "bg_color_night", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "link", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "action_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "badge_info", kind: "message", T: () => BadgeInfo },
            { no: 9, name: "report", kind: "message", T: () => Report },
            { no: 10, name: "left_strikethrough_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "simple_text_info", kind: "message", T: () => TextInfo },
            { no: 12, name: "simple_bg_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "simple_bg_color_night", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "bg_gradient_color", kind: "message", T: () => GradientColor },
            { no: 15, name: "order_report_params", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<ButtonInfo>): ButtonInfo {
        const message = { text: "", textColor: "", textColorNight: "", bgColor: "", bgColorNight: "", link: "", actionType: "", leftStrikethroughText: "", simpleBgColor: "", simpleBgColorNight: "", orderReportParams: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ButtonInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ButtonInfo): ButtonInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                case /* string text_color */ 2:
                    message.textColor = reader.string();
                    break;
                case /* string text_color_night */ 3:
                    message.textColorNight = reader.string();
                    break;
                case /* string bg_color */ 4:
                    message.bgColor = reader.string();
                    break;
                case /* string bg_color_night */ 5:
                    message.bgColorNight = reader.string();
                    break;
                case /* string link */ 6:
                    message.link = reader.string();
                    break;
                case /* string action_type */ 7:
                    message.actionType = reader.string();
                    break;
                case /* bilibili.pgc.gateway.player.v2.BadgeInfo badge_info */ 8:
                    message.badgeInfo = BadgeInfo.internalBinaryRead(reader, reader.uint32(), options, message.badgeInfo);
                    break;
                case /* bilibili.pgc.gateway.player.v2.Report report */ 9:
                    message.report = Report.internalBinaryRead(reader, reader.uint32(), options, message.report);
                    break;
                case /* string left_strikethrough_text */ 10:
                    message.leftStrikethroughText = reader.string();
                    break;
                case /* bilibili.pgc.gateway.player.v2.TextInfo simple_text_info */ 11:
                    message.simpleTextInfo = TextInfo.internalBinaryRead(reader, reader.uint32(), options, message.simpleTextInfo);
                    break;
                case /* string simple_bg_color */ 12:
                    message.simpleBgColor = reader.string();
                    break;
                case /* string simple_bg_color_night */ 13:
                    message.simpleBgColorNight = reader.string();
                    break;
                case /* bilibili.pgc.gateway.player.v2.GradientColor bg_gradient_color */ 14:
                    message.bgGradientColor = GradientColor.internalBinaryRead(reader, reader.uint32(), options, message.bgGradientColor);
                    break;
                case /* map<string, string> order_report_params */ 15:
                    this.binaryReadMap15(message.orderReportParams, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap15(map: ButtonInfo["orderReportParams"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ButtonInfo["orderReportParams"] | undefined, val: ButtonInfo["orderReportParams"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bilibili.pgc.gateway.player.v2.ButtonInfo.order_report_params");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: ButtonInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        /* string text_color = 2; */
        if (message.textColor !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.textColor);
        /* string text_color_night = 3; */
        if (message.textColorNight !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.textColorNight);
        /* string bg_color = 4; */
        if (message.bgColor !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.bgColor);
        /* string bg_color_night = 5; */
        if (message.bgColorNight !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.bgColorNight);
        /* string link = 6; */
        if (message.link !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.link);
        /* string action_type = 7; */
        if (message.actionType !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.actionType);
        /* bilibili.pgc.gateway.player.v2.BadgeInfo badge_info = 8; */
        if (message.badgeInfo)
            BadgeInfo.internalBinaryWrite(message.badgeInfo, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.pgc.gateway.player.v2.Report report = 9; */
        if (message.report)
            Report.internalBinaryWrite(message.report, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* string left_strikethrough_text = 10; */
        if (message.leftStrikethroughText !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.leftStrikethroughText);
        /* bilibili.pgc.gateway.player.v2.TextInfo simple_text_info = 11; */
        if (message.simpleTextInfo)
            TextInfo.internalBinaryWrite(message.simpleTextInfo, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* string simple_bg_color = 12; */
        if (message.simpleBgColor !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.simpleBgColor);
        /* string simple_bg_color_night = 13; */
        if (message.simpleBgColorNight !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.simpleBgColorNight);
        /* bilibili.pgc.gateway.player.v2.GradientColor bg_gradient_color = 14; */
        if (message.bgGradientColor)
            GradientColor.internalBinaryWrite(message.bgGradientColor, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* map<string, string> order_report_params = 15; */
        for (let k of Object.keys(message.orderReportParams))
            writer.tag(15, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.orderReportParams[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.pgc.gateway.player.v2.ButtonInfo
 */
export const ButtonInfo = new ButtonInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CastTips$Type extends MessageType<CastTips> {
    constructor() {
        super("bilibili.pgc.gateway.player.v2.CastTips", [
            { no: 1, name: "code", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CastTips>): CastTips {
        const message = { code: 0, message: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CastTips>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CastTips): CastTips {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 code */ 1:
                    message.code = reader.int32();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CastTips, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 code = 1; */
        if (message.code !== 0)
            writer.tag(1, WireType.Varint).int32(message.code);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.pgc.gateway.player.v2.CastTips
 */
export const CastTips = new CastTips$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClipInfo$Type extends MessageType<ClipInfo> {
    constructor() {
        super("bilibili.pgc.gateway.player.v2.ClipInfo", [
            { no: 1, name: "material_no", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "start", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "end", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "clip_type", kind: "enum", T: () => ["bilibili.pgc.gateway.player.v2.ClipType", ClipType] },
            { no: 5, name: "toast_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "multi_view", kind: "message", T: () => MultiView }
        ]);
    }
    create(value?: PartialMessage<ClipInfo>): ClipInfo {
        const message = { materialNo: 0n, start: 0, end: 0, clipType: 0, toastText: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ClipInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClipInfo): ClipInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 material_no */ 1:
                    message.materialNo = reader.int64().toBigInt();
                    break;
                case /* int32 start */ 2:
                    message.start = reader.int32();
                    break;
                case /* int32 end */ 3:
                    message.end = reader.int32();
                    break;
                case /* bilibili.pgc.gateway.player.v2.ClipType clip_type */ 4:
                    message.clipType = reader.int32();
                    break;
                case /* string toast_text */ 5:
                    message.toastText = reader.string();
                    break;
                case /* bilibili.pgc.gateway.player.v2.MultiView multi_view */ 6:
                    message.multiView = MultiView.internalBinaryRead(reader, reader.uint32(), options, message.multiView);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClipInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 material_no = 1; */
        if (message.materialNo !== 0n)
            writer.tag(1, WireType.Varint).int64(message.materialNo);
        /* int32 start = 2; */
        if (message.start !== 0)
            writer.tag(2, WireType.Varint).int32(message.start);
        /* int32 end = 3; */
        if (message.end !== 0)
            writer.tag(3, WireType.Varint).int32(message.end);
        /* bilibili.pgc.gateway.player.v2.ClipType clip_type = 4; */
        if (message.clipType !== 0)
            writer.tag(4, WireType.Varint).int32(message.clipType);
        /* string toast_text = 5; */
        if (message.toastText !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.toastText);
        /* bilibili.pgc.gateway.player.v2.MultiView multi_view = 6; */
        if (message.multiView)
            MultiView.internalBinaryWrite(message.multiView, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.pgc.gateway.player.v2.ClipInfo
 */
export const ClipInfo = new ClipInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContinuePlayInfo$Type extends MessageType<ContinuePlayInfo> {
    constructor() {
        super("bilibili.pgc.gateway.player.v2.ContinuePlayInfo", [
            { no: 1, name: "continue_play_ep_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ContinuePlayInfo>): ContinuePlayInfo {
        const message = { continuePlayEpId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ContinuePlayInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContinuePlayInfo): ContinuePlayInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 continue_play_ep_id */ 1:
                    message.continuePlayEpId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContinuePlayInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 continue_play_ep_id = 1; */
        if (message.continuePlayEpId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.continuePlayEpId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.pgc.gateway.player.v2.ContinuePlayInfo
 */
export const ContinuePlayInfo = new ContinuePlayInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Coupon$Type extends MessageType<Coupon> {
    constructor() {
        super("bilibili.pgc.gateway.player.v2.Coupon", [
            { no: 1, name: "coupon_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "use_desc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "desc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "pay_button_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "pay_button_text_line_through", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "real_amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "expire_time", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<Coupon>): Coupon {
        const message = { couponToken: "", type: 0n, value: "", useDesc: "", title: "", desc: "", payButtonText: "", payButtonTextLineThrough: "", realAmount: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Coupon>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Coupon): Coupon {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string coupon_token */ 1:
                    message.couponToken = reader.string();
                    break;
                case /* int64 type */ 2:
                    message.type = reader.int64().toBigInt();
                    break;
                case /* string value */ 3:
                    message.value = reader.string();
                    break;
                case /* string use_desc */ 4:
                    message.useDesc = reader.string();
                    break;
                case /* string title */ 5:
                    message.title = reader.string();
                    break;
                case /* string desc */ 6:
                    message.desc = reader.string();
                    break;
                case /* string pay_button_text */ 7:
                    message.payButtonText = reader.string();
                    break;
                case /* string pay_button_text_line_through */ 8:
                    message.payButtonTextLineThrough = reader.string();
                    break;
                case /* string real_amount */ 9:
                    message.realAmount = reader.string();
                    break;
                case /* google.protobuf.Timestamp expire_time */ 10:
                    message.expireTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.expireTime);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Coupon, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string coupon_token = 1; */
        if (message.couponToken !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.couponToken);
        /* int64 type = 2; */
        if (message.type !== 0n)
            writer.tag(2, WireType.Varint).int64(message.type);
        /* string value = 3; */
        if (message.value !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.value);
        /* string use_desc = 4; */
        if (message.useDesc !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.useDesc);
        /* string title = 5; */
        if (message.title !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.title);
        /* string desc = 6; */
        if (message.desc !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.desc);
        /* string pay_button_text = 7; */
        if (message.payButtonText !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.payButtonText);
        /* string pay_button_text_line_through = 8; */
        if (message.payButtonTextLineThrough !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.payButtonTextLineThrough);
        /* string real_amount = 9; */
        if (message.realAmount !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.realAmount);
        /* google.protobuf.Timestamp expire_time = 10; */
        if (message.expireTime)
            Timestamp.internalBinaryWrite(message.expireTime, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.pgc.gateway.player.v2.Coupon
 */
export const Coupon = new Coupon$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CouponInfo$Type extends MessageType<CouponInfo> {
    constructor() {
        super("bilibili.pgc.gateway.player.v2.CouponInfo", [
            { no: 1, name: "toast", kind: "message", T: () => CouponToast },
            { no: 2, name: "pop_win", kind: "message", T: () => PopWin }
        ]);
    }
    create(value?: PartialMessage<CouponInfo>): CouponInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CouponInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CouponInfo): CouponInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.pgc.gateway.player.v2.CouponToast toast */ 1:
                    message.toast = CouponToast.internalBinaryRead(reader, reader.uint32(), options, message.toast);
                    break;
                case /* bilibili.pgc.gateway.player.v2.PopWin pop_win */ 2:
                    message.popWin = PopWin.internalBinaryRead(reader, reader.uint32(), options, message.popWin);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CouponInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bilibili.pgc.gateway.player.v2.CouponToast toast = 1; */
        if (message.toast)
            CouponToast.internalBinaryWrite(message.toast, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.pgc.gateway.player.v2.PopWin pop_win = 2; */
        if (message.popWin)
            PopWin.internalBinaryWrite(message.popWin, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.pgc.gateway.player.v2.CouponInfo
 */
export const CouponInfo = new CouponInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CouponTextInfo$Type extends MessageType<CouponTextInfo> {
    constructor() {
        super("bilibili.pgc.gateway.player.v2.CouponTextInfo", [
            { no: 1, name: "positive_preview", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "section", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CouponTextInfo>): CouponTextInfo {
        const message = { positivePreview: "", section: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CouponTextInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CouponTextInfo): CouponTextInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string positive_preview */ 1:
                    message.positivePreview = reader.string();
                    break;
                case /* string section */ 2:
                    message.section = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CouponTextInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string positive_preview = 1; */
        if (message.positivePreview !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.positivePreview);
        /* string section = 2; */
        if (message.section !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.section);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.pgc.gateway.player.v2.CouponTextInfo
 */
export const CouponTextInfo = new CouponTextInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CouponToast$Type extends MessageType<CouponToast> {
    constructor() {
        super("bilibili.pgc.gateway.player.v2.CouponToast", [
            { no: 1, name: "text_info", kind: "message", T: () => CouponTextInfo },
            { no: 2, name: "button", kind: "message", T: () => ButtonInfo }
        ]);
    }
    create(value?: PartialMessage<CouponToast>): CouponToast {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CouponToast>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CouponToast): CouponToast {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.pgc.gateway.player.v2.CouponTextInfo text_info */ 1:
                    message.textInfo = CouponTextInfo.internalBinaryRead(reader, reader.uint32(), options, message.textInfo);
                    break;
                case /* bilibili.pgc.gateway.player.v2.ButtonInfo button */ 2:
                    message.button = ButtonInfo.internalBinaryRead(reader, reader.uint32(), options, message.button);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CouponToast, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bilibili.pgc.gateway.player.v2.CouponTextInfo text_info = 1; */
        if (message.textInfo)
            CouponTextInfo.internalBinaryWrite(message.textInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.pgc.gateway.player.v2.ButtonInfo button = 2; */
        if (message.button)
            ButtonInfo.internalBinaryWrite(message.button, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.pgc.gateway.player.v2.CouponToast
 */
export const CouponToast = new CouponToast$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DashItem$Type extends MessageType<DashItem> {
    constructor() {
        super("bilibili.pgc.gateway.player.v2.DashItem", [
            { no: 1, name: "id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "base_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "backup_url", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "bandwidth", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "codecid", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "md5", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "size", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "frame_rate", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DashItem>): DashItem {
        const message = { id: 0, baseUrl: "", backupUrl: [], bandwidth: 0, codecid: 0, md5: "", size: 0n, frameRate: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DashItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DashItem): DashItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                case /* string base_url */ 2:
                    message.baseUrl = reader.string();
                    break;
                case /* repeated string backup_url */ 3:
                    message.backupUrl.push(reader.string());
                    break;
                case /* uint32 bandwidth */ 4:
                    message.bandwidth = reader.uint32();
                    break;
                case /* uint32 codecid */ 5:
                    message.codecid = reader.uint32();
                    break;
                case /* string md5 */ 6:
                    message.md5 = reader.string();
                    break;
                case /* uint64 size */ 7:
                    message.size = reader.uint64().toBigInt();
                    break;
                case /* string frame_rate */ 8:
                    message.frameRate = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DashItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint32(message.id);
        /* string base_url = 2; */
        if (message.baseUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.baseUrl);
        /* repeated string backup_url = 3; */
        for (let i = 0; i < message.backupUrl.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.backupUrl[i]);
        /* uint32 bandwidth = 4; */
        if (message.bandwidth !== 0)
            writer.tag(4, WireType.Varint).uint32(message.bandwidth);
        /* uint32 codecid = 5; */
        if (message.codecid !== 0)
            writer.tag(5, WireType.Varint).uint32(message.codecid);
        /* string md5 = 6; */
        if (message.md5 !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.md5);
        /* uint64 size = 7; */
        if (message.size !== 0n)
            writer.tag(7, WireType.Varint).uint64(message.size);
        /* string frame_rate = 8; */
        if (message.frameRate !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.frameRate);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.pgc.gateway.player.v2.DashItem
 */
export const DashItem = new DashItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DashVideo$Type extends MessageType<DashVideo> {
    constructor() {
        super("bilibili.pgc.gateway.player.v2.DashVideo", [
            { no: 1, name: "base_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "backup_url", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "bandwidth", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "codecid", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "md5", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "size", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "audio_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "no_rexcode", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "frame_rate", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "width", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "height", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<DashVideo>): DashVideo {
        const message = { baseUrl: "", backupUrl: [], bandwidth: 0, codecid: 0, md5: "", size: 0n, audioId: 0, noRexcode: false, frameRate: "", width: 0, height: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DashVideo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DashVideo): DashVideo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string base_url */ 1:
                    message.baseUrl = reader.string();
                    break;
                case /* repeated string backup_url */ 2:
                    message.backupUrl.push(reader.string());
                    break;
                case /* uint32 bandwidth */ 3:
                    message.bandwidth = reader.uint32();
                    break;
                case /* uint32 codecid */ 4:
                    message.codecid = reader.uint32();
                    break;
                case /* string md5 */ 5:
                    message.md5 = reader.string();
                    break;
                case /* uint64 size */ 6:
                    message.size = reader.uint64().toBigInt();
                    break;
                case /* uint32 audio_id */ 7:
                    message.audioId = reader.uint32();
                    break;
                case /* bool no_rexcode */ 8:
                    message.noRexcode = reader.bool();
                    break;
                case /* string frame_rate */ 9:
                    message.frameRate = reader.string();
                    break;
                case /* int32 width */ 10:
                    message.width = reader.int32();
                    break;
                case /* int32 height */ 11:
                    message.height = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DashVideo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string base_url = 1; */
        if (message.baseUrl !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.baseUrl);
        /* repeated string backup_url = 2; */
        for (let i = 0; i < message.backupUrl.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.backupUrl[i]);
        /* uint32 bandwidth = 3; */
        if (message.bandwidth !== 0)
            writer.tag(3, WireType.Varint).uint32(message.bandwidth);
        /* uint32 codecid = 4; */
        if (message.codecid !== 0)
            writer.tag(4, WireType.Varint).uint32(message.codecid);
        /* string md5 = 5; */
        if (message.md5 !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.md5);
        /* uint64 size = 6; */
        if (message.size !== 0n)
            writer.tag(6, WireType.Varint).uint64(message.size);
        /* uint32 audio_id = 7; */
        if (message.audioId !== 0)
            writer.tag(7, WireType.Varint).uint32(message.audioId);
        /* bool no_rexcode = 8; */
        if (message.noRexcode !== false)
            writer.tag(8, WireType.Varint).bool(message.noRexcode);
        /* string frame_rate = 9; */
        if (message.frameRate !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.frameRate);
        /* int32 width = 10; */
        if (message.width !== 0)
            writer.tag(10, WireType.Varint).int32(message.width);
        /* int32 height = 11; */
        if (message.height !== 0)
            writer.tag(11, WireType.Varint).int32(message.height);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.pgc.gateway.player.v2.DashVideo
 */
export const DashVideo = new DashVideo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Dialog$Type extends MessageType<Dialog> {
    constructor() {
        super("bilibili.pgc.gateway.player.v2.Dialog", [
            { no: 1, name: "code", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "msg", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "style_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "config", kind: "message", T: () => DialogConfig },
            { no: 6, name: "title", kind: "message", T: () => TextInfo },
            { no: 7, name: "subtitle", kind: "message", T: () => TextInfo },
            { no: 8, name: "image", kind: "message", T: () => ImageInfo },
            { no: 9, name: "button", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ButtonInfo },
            { no: 10, name: "bottom_desc", kind: "message", T: () => ButtonInfo },
            { no: 11, name: "report", kind: "message", T: () => Report },
            { no: 12, name: "count_down_sec", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "right_bottom_desc", kind: "message", T: () => TextInfo },
            { no: 14, name: "bottom_display", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BottomDisplay }
        ]);
    }
    create(value?: PartialMessage<Dialog>): Dialog {
        const message = { code: 0n, msg: "", type: "", styleType: "", button: [], countDownSec: 0, bottomDisplay: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Dialog>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Dialog): Dialog {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 code */ 1:
                    message.code = reader.int64().toBigInt();
                    break;
                case /* string msg */ 2:
                    message.msg = reader.string();
                    break;
                case /* string type */ 3:
                    message.type = reader.string();
                    break;
                case /* string style_type */ 4:
                    message.styleType = reader.string();
                    break;
                case /* bilibili.pgc.gateway.player.v2.DialogConfig config */ 5:
                    message.config = DialogConfig.internalBinaryRead(reader, reader.uint32(), options, message.config);
                    break;
                case /* bilibili.pgc.gateway.player.v2.TextInfo title */ 6:
                    message.title = TextInfo.internalBinaryRead(reader, reader.uint32(), options, message.title);
                    break;
                case /* bilibili.pgc.gateway.player.v2.TextInfo subtitle */ 7:
                    message.subtitle = TextInfo.internalBinaryRead(reader, reader.uint32(), options, message.subtitle);
                    break;
                case /* bilibili.pgc.gateway.player.v2.ImageInfo image */ 8:
                    message.image = ImageInfo.internalBinaryRead(reader, reader.uint32(), options, message.image);
                    break;
                case /* repeated bilibili.pgc.gateway.player.v2.ButtonInfo button */ 9:
                    message.button.push(ButtonInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bilibili.pgc.gateway.player.v2.ButtonInfo bottom_desc */ 10:
                    message.bottomDesc = ButtonInfo.internalBinaryRead(reader, reader.uint32(), options, message.bottomDesc);
                    break;
                case /* bilibili.pgc.gateway.player.v2.Report report */ 11:
                    message.report = Report.internalBinaryRead(reader, reader.uint32(), options, message.report);
                    break;
                case /* int32 count_down_sec */ 12:
                    message.countDownSec = reader.int32();
                    break;
                case /* bilibili.pgc.gateway.player.v2.TextInfo right_bottom_desc */ 13:
                    message.rightBottomDesc = TextInfo.internalBinaryRead(reader, reader.uint32(), options, message.rightBottomDesc);
                    break;
                case /* repeated bilibili.pgc.gateway.player.v2.BottomDisplay bottom_display */ 14:
                    message.bottomDisplay.push(BottomDisplay.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Dialog, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 code = 1; */
        if (message.code !== 0n)
            writer.tag(1, WireType.Varint).int64(message.code);
        /* string msg = 2; */
        if (message.msg !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.msg);
        /* string type = 3; */
        if (message.type !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.type);
        /* string style_type = 4; */
        if (message.styleType !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.styleType);
        /* bilibili.pgc.gateway.player.v2.DialogConfig config = 5; */
        if (message.config)
            DialogConfig.internalBinaryWrite(message.config, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.pgc.gateway.player.v2.TextInfo title = 6; */
        if (message.title)
            TextInfo.internalBinaryWrite(message.title, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.pgc.gateway.player.v2.TextInfo subtitle = 7; */
        if (message.subtitle)
            TextInfo.internalBinaryWrite(message.subtitle, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.pgc.gateway.player.v2.ImageInfo image = 8; */
        if (message.image)
            ImageInfo.internalBinaryWrite(message.image, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.pgc.gateway.player.v2.ButtonInfo button = 9; */
        for (let i = 0; i < message.button.length; i++)
            ButtonInfo.internalBinaryWrite(message.button[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.pgc.gateway.player.v2.ButtonInfo bottom_desc = 10; */
        if (message.bottomDesc)
            ButtonInfo.internalBinaryWrite(message.bottomDesc, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.pgc.gateway.player.v2.Report report = 11; */
        if (message.report)
            Report.internalBinaryWrite(message.report, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* int32 count_down_sec = 12; */
        if (message.countDownSec !== 0)
            writer.tag(12, WireType.Varint).int32(message.countDownSec);
        /* bilibili.pgc.gateway.player.v2.TextInfo right_bottom_desc = 13; */
        if (message.rightBottomDesc)
            TextInfo.internalBinaryWrite(message.rightBottomDesc, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.pgc.gateway.player.v2.BottomDisplay bottom_display = 14; */
        for (let i = 0; i < message.bottomDisplay.length; i++)
            BottomDisplay.internalBinaryWrite(message.bottomDisplay[i], writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.pgc.gateway.player.v2.Dialog
 */
export const Dialog = new Dialog$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DialogConfig$Type extends MessageType<DialogConfig> {
    constructor() {
        super("bilibili.pgc.gateway.player.v2.DialogConfig", [
            { no: 1, name: "is_show_cover", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "is_orientation_enable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "is_nested_scroll_enable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "is_force_halfscreen_enable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<DialogConfig>): DialogConfig {
        const message = { isShowCover: false, isOrientationEnable: false, isNestedScrollEnable: false, isForceHalfscreenEnable: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DialogConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DialogConfig): DialogConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_show_cover */ 1:
                    message.isShowCover = reader.bool();
                    break;
                case /* bool is_orientation_enable */ 2:
                    message.isOrientationEnable = reader.bool();
                    break;
                case /* bool is_nested_scroll_enable */ 3:
                    message.isNestedScrollEnable = reader.bool();
                    break;
                case /* bool is_force_halfscreen_enable */ 4:
                    message.isForceHalfscreenEnable = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DialogConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool is_show_cover = 1; */
        if (message.isShowCover !== false)
            writer.tag(1, WireType.Varint).bool(message.isShowCover);
        /* bool is_orientation_enable = 2; */
        if (message.isOrientationEnable !== false)
            writer.tag(2, WireType.Varint).bool(message.isOrientationEnable);
        /* bool is_nested_scroll_enable = 3; */
        if (message.isNestedScrollEnable !== false)
            writer.tag(3, WireType.Varint).bool(message.isNestedScrollEnable);
        /* bool is_force_halfscreen_enable = 4; */
        if (message.isForceHalfscreenEnable !== false)
            writer.tag(4, WireType.Varint).bool(message.isForceHalfscreenEnable);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.pgc.gateway.player.v2.DialogConfig
 */
export const DialogConfig = new DialogConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Dimension$Type extends MessageType<Dimension> {
    constructor() {
        super("bilibili.pgc.gateway.player.v2.Dimension", [
            { no: 1, name: "width", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "height", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "rotate", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Dimension>): Dimension {
        const message = { width: 0, height: 0, rotate: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Dimension>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Dimension): Dimension {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 width */ 1:
                    message.width = reader.int32();
                    break;
                case /* int32 height */ 2:
                    message.height = reader.int32();
                    break;
                case /* int32 rotate */ 3:
                    message.rotate = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Dimension, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 width = 1; */
        if (message.width !== 0)
            writer.tag(1, WireType.Varint).int32(message.width);
        /* int32 height = 2; */
        if (message.height !== 0)
            writer.tag(2, WireType.Varint).int32(message.height);
        /* int32 rotate = 3; */
        if (message.rotate !== 0)
            writer.tag(3, WireType.Varint).int32(message.rotate);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.pgc.gateway.player.v2.Dimension
 */
export const Dimension = new Dimension$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DolbyItem$Type extends MessageType<DolbyItem> {
    constructor() {
        super("bilibili.pgc.gateway.player.v2.DolbyItem", [
            { no: 1, name: "type", kind: "enum", T: () => ["bilibili.pgc.gateway.player.v2.DolbyItem.Type", DolbyItem_Type] },
            { no: 2, name: "audio", kind: "message", T: () => DashItem }
        ]);
    }
    create(value?: PartialMessage<DolbyItem>): DolbyItem {
        const message = { type: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DolbyItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DolbyItem): DolbyItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.pgc.gateway.player.v2.DolbyItem.Type type */ 1:
                    message.type = reader.int32();
                    break;
                case /* bilibili.pgc.gateway.player.v2.DashItem audio */ 2:
                    message.audio = DashItem.internalBinaryRead(reader, reader.uint32(), options, message.audio);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DolbyItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bilibili.pgc.gateway.player.v2.DolbyItem.Type type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* bilibili.pgc.gateway.player.v2.DashItem audio = 2; */
        if (message.audio)
            DashItem.internalBinaryWrite(message.audio, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.pgc.gateway.player.v2.DolbyItem
 */
export const DolbyItem = new DolbyItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EndPage$Type extends MessageType<EndPage> {
    constructor() {
        super("bilibili.pgc.gateway.player.v2.EndPage", [
            { no: 1, name: "dialog", kind: "message", T: () => Dialog },
            { no: 2, name: "hide", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<EndPage>): EndPage {
        const message = { hide: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EndPage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EndPage): EndPage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.pgc.gateway.player.v2.Dialog dialog */ 1:
                    message.dialog = Dialog.internalBinaryRead(reader, reader.uint32(), options, message.dialog);
                    break;
                case /* bool hide */ 2:
                    message.hide = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EndPage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bilibili.pgc.gateway.player.v2.Dialog dialog = 1; */
        if (message.dialog)
            Dialog.internalBinaryWrite(message.dialog, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bool hide = 2; */
        if (message.hide !== false)
            writer.tag(2, WireType.Varint).bool(message.hide);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.pgc.gateway.player.v2.EndPage
 */
export const EndPage = new EndPage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Event$Type extends MessageType<Event> {
    constructor() {
        super("bilibili.pgc.gateway.player.v2.Event", [
            { no: 1, name: "shake", kind: "message", T: () => Shake }
        ]);
    }
    create(value?: PartialMessage<Event>): Event {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Event>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event): Event {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.pgc.gateway.player.v2.Shake shake */ 1:
                    message.shake = Shake.internalBinaryRead(reader, reader.uint32(), options, message.shake);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Event, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bilibili.pgc.gateway.player.v2.Shake shake = 1; */
        if (message.shake)
            Shake.internalBinaryWrite(message.shake, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.pgc.gateway.player.v2.Event
 */
export const Event = new Event$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FreyaConfig$Type extends MessageType<FreyaConfig> {
    constructor() {
        super("bilibili.pgc.gateway.player.v2.FreyaConfig", [
            { no: 1, name: "desc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "issued_cnt", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "is_always_show", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "screen_number", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "full_screen_number", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<FreyaConfig>): FreyaConfig {
        const message = { desc: "", type: 0, issuedCnt: 0, isAlwaysShow: false, screenNumber: 0, fullScreenNumber: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FreyaConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FreyaConfig): FreyaConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string desc */ 1:
                    message.desc = reader.string();
                    break;
                case /* int32 type */ 2:
                    message.type = reader.int32();
                    break;
                case /* int32 issued_cnt */ 3:
                    message.issuedCnt = reader.int32();
                    break;
                case /* bool is_always_show */ 4:
                    message.isAlwaysShow = reader.bool();
                    break;
                case /* int32 screen_number */ 5:
                    message.screenNumber = reader.int32();
                    break;
                case /* int32 full_screen_number */ 6:
                    message.fullScreenNumber = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FreyaConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string desc = 1; */
        if (message.desc !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.desc);
        /* int32 type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        /* int32 issued_cnt = 3; */
        if (message.issuedCnt !== 0)
            writer.tag(3, WireType.Varint).int32(message.issuedCnt);
        /* bool is_always_show = 4; */
        if (message.isAlwaysShow !== false)
            writer.tag(4, WireType.Varint).bool(message.isAlwaysShow);
        /* int32 screen_number = 5; */
        if (message.screenNumber !== 0)
            writer.tag(5, WireType.Varint).int32(message.screenNumber);
        /* int32 full_screen_number = 6; */
        if (message.fullScreenNumber !== 0)
            writer.tag(6, WireType.Varint).int32(message.fullScreenNumber);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.pgc.gateway.player.v2.FreyaConfig
 */
export const FreyaConfig = new FreyaConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GradientColor$Type extends MessageType<GradientColor> {
    constructor() {
        super("bilibili.pgc.gateway.player.v2.GradientColor", [
            { no: 1, name: "start_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "end_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GradientColor>): GradientColor {
        const message = { startColor: "", endColor: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GradientColor>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GradientColor): GradientColor {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string start_color */ 1:
                    message.startColor = reader.string();
                    break;
                case /* string end_color */ 2:
                    message.endColor = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GradientColor, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string start_color = 1; */
        if (message.startColor !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.startColor);
        /* string end_color = 2; */
        if (message.endColor !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.endColor);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.pgc.gateway.player.v2.GradientColor
 */
export const GradientColor = new GradientColor$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HighDefinitionTrialInfo$Type extends MessageType<HighDefinitionTrialInfo> {
    constructor() {
        super("bilibili.pgc.gateway.player.v2.HighDefinitionTrialInfo", [
            { no: 1, name: "trial_able", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "remaining_times", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "start", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "time_length", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "start_toast", kind: "message", T: () => Toast },
            { no: 6, name: "end_toast", kind: "message", T: () => Toast },
            { no: 7, name: "report", kind: "message", T: () => Report },
            { no: 8, name: "quality_open_tip_btn", kind: "message", T: () => ButtonInfo },
            { no: 9, name: "no_longer_trial_btn", kind: "message", T: () => ButtonInfo }
        ]);
    }
    create(value?: PartialMessage<HighDefinitionTrialInfo>): HighDefinitionTrialInfo {
        const message = { trialAble: false, remainingTimes: 0, start: 0, timeLength: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HighDefinitionTrialInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HighDefinitionTrialInfo): HighDefinitionTrialInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool trial_able */ 1:
                    message.trialAble = reader.bool();
                    break;
                case /* int32 remaining_times */ 2:
                    message.remainingTimes = reader.int32();
                    break;
                case /* int32 start */ 3:
                    message.start = reader.int32();
                    break;
                case /* int32 time_length */ 4:
                    message.timeLength = reader.int32();
                    break;
                case /* bilibili.pgc.gateway.player.v2.Toast start_toast */ 5:
                    message.startToast = Toast.internalBinaryRead(reader, reader.uint32(), options, message.startToast);
                    break;
                case /* bilibili.pgc.gateway.player.v2.Toast end_toast */ 6:
                    message.endToast = Toast.internalBinaryRead(reader, reader.uint32(), options, message.endToast);
                    break;
                case /* bilibili.pgc.gateway.player.v2.Report report */ 7:
                    message.report = Report.internalBinaryRead(reader, reader.uint32(), options, message.report);
                    break;
                case /* bilibili.pgc.gateway.player.v2.ButtonInfo quality_open_tip_btn */ 8:
                    message.qualityOpenTipBtn = ButtonInfo.internalBinaryRead(reader, reader.uint32(), options, message.qualityOpenTipBtn);
                    break;
                case /* bilibili.pgc.gateway.player.v2.ButtonInfo no_longer_trial_btn */ 9:
                    message.noLongerTrialBtn = ButtonInfo.internalBinaryRead(reader, reader.uint32(), options, message.noLongerTrialBtn);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HighDefinitionTrialInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool trial_able = 1; */
        if (message.trialAble !== false)
            writer.tag(1, WireType.Varint).bool(message.trialAble);
        /* int32 remaining_times = 2; */
        if (message.remainingTimes !== 0)
            writer.tag(2, WireType.Varint).int32(message.remainingTimes);
        /* int32 start = 3; */
        if (message.start !== 0)
            writer.tag(3, WireType.Varint).int32(message.start);
        /* int32 time_length = 4; */
        if (message.timeLength !== 0)
            writer.tag(4, WireType.Varint).int32(message.timeLength);
        /* bilibili.pgc.gateway.player.v2.Toast start_toast = 5; */
        if (message.startToast)
            Toast.internalBinaryWrite(message.startToast, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.pgc.gateway.player.v2.Toast end_toast = 6; */
        if (message.endToast)
            Toast.internalBinaryWrite(message.endToast, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.pgc.gateway.player.v2.Report report = 7; */
        if (message.report)
            Report.internalBinaryWrite(message.report, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.pgc.gateway.player.v2.ButtonInfo quality_open_tip_btn = 8; */
        if (message.qualityOpenTipBtn)
            ButtonInfo.internalBinaryWrite(message.qualityOpenTipBtn, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.pgc.gateway.player.v2.ButtonInfo no_longer_trial_btn = 9; */
        if (message.noLongerTrialBtn)
            ButtonInfo.internalBinaryWrite(message.noLongerTrialBtn, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.pgc.gateway.player.v2.HighDefinitionTrialInfo
 */
export const HighDefinitionTrialInfo = new HighDefinitionTrialInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ImageInfo$Type extends MessageType<ImageInfo> {
    constructor() {
        super("bilibili.pgc.gateway.player.v2.ImageInfo", [
            { no: 1, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ImageInfo>): ImageInfo {
        const message = { url: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ImageInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ImageInfo): ImageInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string url */ 1:
                    message.url = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ImageInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string url = 1; */
        if (message.url !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.url);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.pgc.gateway.player.v2.ImageInfo
 */
export const ImageInfo = new ImageInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MultiView$Type extends MessageType<MultiView> {
    constructor() {
        super("bilibili.pgc.gateway.player.v2.MultiView", [
            { no: 1, name: "button_material", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "ep_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "cid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "avid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<MultiView>): MultiView {
        const message = { buttonMaterial: "", epId: 0n, cid: 0n, avid: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MultiView>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MultiView): MultiView {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string button_material */ 1:
                    message.buttonMaterial = reader.string();
                    break;
                case /* int64 ep_id */ 2:
                    message.epId = reader.int64().toBigInt();
                    break;
                case /* int64 cid */ 3:
                    message.cid = reader.int64().toBigInt();
                    break;
                case /* int64 avid */ 4:
                    message.avid = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MultiView, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string button_material = 1; */
        if (message.buttonMaterial !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.buttonMaterial);
        /* int64 ep_id = 2; */
        if (message.epId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.epId);
        /* int64 cid = 3; */
        if (message.cid !== 0n)
            writer.tag(3, WireType.Varint).int64(message.cid);
        /* int64 avid = 4; */
        if (message.avid !== 0n)
            writer.tag(4, WireType.Varint).int64(message.avid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.pgc.gateway.player.v2.MultiView
 */
export const MultiView = new MultiView$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PayTip$Type extends MessageType<PayTip> {
    constructor() {
        super("bilibili.pgc.gateway.player.v2.PayTip", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "show_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "img", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "bg_day_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "bg_night_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "bg_line_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "bg_night_line_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "text_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "text_night_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "view_start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 14, name: "button", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ButtonInfo },
            { no: 15, name: "url_open_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 16, name: "report", kind: "message", T: () => Report },
            { no: 17, name: "angle_style", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 18, name: "report_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 19, name: "order_report_params", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<PayTip>): PayTip {
        const message = { title: "", url: "", icon: "", type: 0, showType: 0, img: "", bgDayColor: "", bgNightColor: "", bgLineColor: "", bgNightLineColor: "", textColor: "", textNightColor: "", viewStartTime: 0n, button: [], urlOpenType: 0, angleStyle: 0, reportType: 0, orderReportParams: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PayTip>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PayTip): PayTip {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string url */ 2:
                    message.url = reader.string();
                    break;
                case /* string icon */ 3:
                    message.icon = reader.string();
                    break;
                case /* int32 type */ 4:
                    message.type = reader.int32();
                    break;
                case /* int32 show_type */ 5:
                    message.showType = reader.int32();
                    break;
                case /* string img */ 6:
                    message.img = reader.string();
                    break;
                case /* string bg_day_color */ 7:
                    message.bgDayColor = reader.string();
                    break;
                case /* string bg_night_color */ 8:
                    message.bgNightColor = reader.string();
                    break;
                case /* string bg_line_color */ 9:
                    message.bgLineColor = reader.string();
                    break;
                case /* string bg_night_line_color */ 10:
                    message.bgNightLineColor = reader.string();
                    break;
                case /* string text_color */ 11:
                    message.textColor = reader.string();
                    break;
                case /* string text_night_color */ 12:
                    message.textNightColor = reader.string();
                    break;
                case /* int64 view_start_time */ 13:
                    message.viewStartTime = reader.int64().toBigInt();
                    break;
                case /* repeated bilibili.pgc.gateway.player.v2.ButtonInfo button */ 14:
                    message.button.push(ButtonInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 url_open_type */ 15:
                    message.urlOpenType = reader.int32();
                    break;
                case /* bilibili.pgc.gateway.player.v2.Report report */ 16:
                    message.report = Report.internalBinaryRead(reader, reader.uint32(), options, message.report);
                    break;
                case /* int32 angle_style */ 17:
                    message.angleStyle = reader.int32();
                    break;
                case /* int32 report_type */ 18:
                    message.reportType = reader.int32();
                    break;
                case /* map<string, string> order_report_params */ 19:
                    this.binaryReadMap19(message.orderReportParams, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap19(map: PayTip["orderReportParams"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof PayTip["orderReportParams"] | undefined, val: PayTip["orderReportParams"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bilibili.pgc.gateway.player.v2.PayTip.order_report_params");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: PayTip, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string url = 2; */
        if (message.url !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.url);
        /* string icon = 3; */
        if (message.icon !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.icon);
        /* int32 type = 4; */
        if (message.type !== 0)
            writer.tag(4, WireType.Varint).int32(message.type);
        /* int32 show_type = 5; */
        if (message.showType !== 0)
            writer.tag(5, WireType.Varint).int32(message.showType);
        /* string img = 6; */
        if (message.img !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.img);
        /* string bg_day_color = 7; */
        if (message.bgDayColor !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.bgDayColor);
        /* string bg_night_color = 8; */
        if (message.bgNightColor !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.bgNightColor);
        /* string bg_line_color = 9; */
        if (message.bgLineColor !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.bgLineColor);
        /* string bg_night_line_color = 10; */
        if (message.bgNightLineColor !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.bgNightLineColor);
        /* string text_color = 11; */
        if (message.textColor !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.textColor);
        /* string text_night_color = 12; */
        if (message.textNightColor !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.textNightColor);
        /* int64 view_start_time = 13; */
        if (message.viewStartTime !== 0n)
            writer.tag(13, WireType.Varint).int64(message.viewStartTime);
        /* repeated bilibili.pgc.gateway.player.v2.ButtonInfo button = 14; */
        for (let i = 0; i < message.button.length; i++)
            ButtonInfo.internalBinaryWrite(message.button[i], writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* int32 url_open_type = 15; */
        if (message.urlOpenType !== 0)
            writer.tag(15, WireType.Varint).int32(message.urlOpenType);
        /* bilibili.pgc.gateway.player.v2.Report report = 16; */
        if (message.report)
            Report.internalBinaryWrite(message.report, writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        /* int32 angle_style = 17; */
        if (message.angleStyle !== 0)
            writer.tag(17, WireType.Varint).int32(message.angleStyle);
        /* int32 report_type = 18; */
        if (message.reportType !== 0)
            writer.tag(18, WireType.Varint).int32(message.reportType);
        /* map<string, string> order_report_params = 19; */
        for (let k of Object.keys(message.orderReportParams))
            writer.tag(19, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.orderReportParams[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.pgc.gateway.player.v2.PayTip
 */
export const PayTip = new PayTip$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayAbilityConf$Type extends MessageType<PlayAbilityConf> {
    constructor() {
        super("bilibili.pgc.gateway.player.v2.PlayAbilityConf", [
            { no: 1, name: "background_play_disable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "flip_disable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "cast_disable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "feedback_disable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "subtitle_disable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "playback_rate_disable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "time_up_disable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "playback_mode_disable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "scale_mode_disable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "like_disable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "dislike_disable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "coin_disable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "elec_disable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "share_disable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "screen_shot_disable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 16, name: "lock_screen_disable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 17, name: "recommend_disable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 18, name: "playback_speed_disable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 19, name: "definition_disable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 20, name: "selections_disable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 21, name: "next_disable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 22, name: "edit_dm_disable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 23, name: "small_window_disable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 24, name: "shake_disable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 25, name: "outer_dm_disable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 26, name: "inner_dm_disable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 27, name: "freya_enter_disable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 28, name: "dolby_disable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 29, name: "freya_full_disable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 30, name: "skip_oped_switch_disable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 31, name: "record_screen_disable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 32, name: "color_optimize_disable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<PlayAbilityConf>): PlayAbilityConf {
        const message = { backgroundPlayDisable: false, flipDisable: false, castDisable: false, feedbackDisable: false, subtitleDisable: false, playbackRateDisable: false, timeUpDisable: false, playbackModeDisable: false, scaleModeDisable: false, likeDisable: false, dislikeDisable: false, coinDisable: false, elecDisable: false, shareDisable: false, screenShotDisable: false, lockScreenDisable: false, recommendDisable: false, playbackSpeedDisable: false, definitionDisable: false, selectionsDisable: false, nextDisable: false, editDmDisable: false, smallWindowDisable: false, shakeDisable: false, outerDmDisable: false, innerDmDisable: false, freyaEnterDisable: false, dolbyDisable: false, freyaFullDisable: false, skipOpedSwitchDisable: false, recordScreenDisable: false, colorOptimizeDisable: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayAbilityConf>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayAbilityConf): PlayAbilityConf {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool background_play_disable */ 1:
                    message.backgroundPlayDisable = reader.bool();
                    break;
                case /* bool flip_disable */ 2:
                    message.flipDisable = reader.bool();
                    break;
                case /* bool cast_disable */ 3:
                    message.castDisable = reader.bool();
                    break;
                case /* bool feedback_disable */ 4:
                    message.feedbackDisable = reader.bool();
                    break;
                case /* bool subtitle_disable */ 5:
                    message.subtitleDisable = reader.bool();
                    break;
                case /* bool playback_rate_disable */ 6:
                    message.playbackRateDisable = reader.bool();
                    break;
                case /* bool time_up_disable */ 7:
                    message.timeUpDisable = reader.bool();
                    break;
                case /* bool playback_mode_disable */ 8:
                    message.playbackModeDisable = reader.bool();
                    break;
                case /* bool scale_mode_disable */ 9:
                    message.scaleModeDisable = reader.bool();
                    break;
                case /* bool like_disable */ 10:
                    message.likeDisable = reader.bool();
                    break;
                case /* bool dislike_disable */ 11:
                    message.dislikeDisable = reader.bool();
                    break;
                case /* bool coin_disable */ 12:
                    message.coinDisable = reader.bool();
                    break;
                case /* bool elec_disable */ 13:
                    message.elecDisable = reader.bool();
                    break;
                case /* bool share_disable */ 14:
                    message.shareDisable = reader.bool();
                    break;
                case /* bool screen_shot_disable */ 15:
                    message.screenShotDisable = reader.bool();
                    break;
                case /* bool lock_screen_disable */ 16:
                    message.lockScreenDisable = reader.bool();
                    break;
                case /* bool recommend_disable */ 17:
                    message.recommendDisable = reader.bool();
                    break;
                case /* bool playback_speed_disable */ 18:
                    message.playbackSpeedDisable = reader.bool();
                    break;
                case /* bool definition_disable */ 19:
                    message.definitionDisable = reader.bool();
                    break;
                case /* bool selections_disable */ 20:
                    message.selectionsDisable = reader.bool();
                    break;
                case /* bool next_disable */ 21:
                    message.nextDisable = reader.bool();
                    break;
                case /* bool edit_dm_disable */ 22:
                    message.editDmDisable = reader.bool();
                    break;
                case /* bool small_window_disable */ 23:
                    message.smallWindowDisable = reader.bool();
                    break;
                case /* bool shake_disable */ 24:
                    message.shakeDisable = reader.bool();
                    break;
                case /* bool outer_dm_disable */ 25:
                    message.outerDmDisable = reader.bool();
                    break;
                case /* bool inner_dm_disable */ 26:
                    message.innerDmDisable = reader.bool();
                    break;
                case /* bool freya_enter_disable */ 27:
                    message.freyaEnterDisable = reader.bool();
                    break;
                case /* bool dolby_disable */ 28:
                    message.dolbyDisable = reader.bool();
                    break;
                case /* bool freya_full_disable */ 29:
                    message.freyaFullDisable = reader.bool();
                    break;
                case /* bool skip_oped_switch_disable */ 30:
                    message.skipOpedSwitchDisable = reader.bool();
                    break;
                case /* bool record_screen_disable */ 31:
                    message.recordScreenDisable = reader.bool();
                    break;
                case /* bool color_optimize_disable */ 32:
                    message.colorOptimizeDisable = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayAbilityConf, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool background_play_disable = 1; */
        if (message.backgroundPlayDisable !== false)
            writer.tag(1, WireType.Varint).bool(message.backgroundPlayDisable);
        /* bool flip_disable = 2; */
        if (message.flipDisable !== false)
            writer.tag(2, WireType.Varint).bool(message.flipDisable);
        /* bool cast_disable = 3; */
        if (message.castDisable !== false)
            writer.tag(3, WireType.Varint).bool(message.castDisable);
        /* bool feedback_disable = 4; */
        if (message.feedbackDisable !== false)
            writer.tag(4, WireType.Varint).bool(message.feedbackDisable);
        /* bool subtitle_disable = 5; */
        if (message.subtitleDisable !== false)
            writer.tag(5, WireType.Varint).bool(message.subtitleDisable);
        /* bool playback_rate_disable = 6; */
        if (message.playbackRateDisable !== false)
            writer.tag(6, WireType.Varint).bool(message.playbackRateDisable);
        /* bool time_up_disable = 7; */
        if (message.timeUpDisable !== false)
            writer.tag(7, WireType.Varint).bool(message.timeUpDisable);
        /* bool playback_mode_disable = 8; */
        if (message.playbackModeDisable !== false)
            writer.tag(8, WireType.Varint).bool(message.playbackModeDisable);
        /* bool scale_mode_disable = 9; */
        if (message.scaleModeDisable !== false)
            writer.tag(9, WireType.Varint).bool(message.scaleModeDisable);
        /* bool like_disable = 10; */
        if (message.likeDisable !== false)
            writer.tag(10, WireType.Varint).bool(message.likeDisable);
        /* bool dislike_disable = 11; */
        if (message.dislikeDisable !== false)
            writer.tag(11, WireType.Varint).bool(message.dislikeDisable);
        /* bool coin_disable = 12; */
        if (message.coinDisable !== false)
            writer.tag(12, WireType.Varint).bool(message.coinDisable);
        /* bool elec_disable = 13; */
        if (message.elecDisable !== false)
            writer.tag(13, WireType.Varint).bool(message.elecDisable);
        /* bool share_disable = 14; */
        if (message.shareDisable !== false)
            writer.tag(14, WireType.Varint).bool(message.shareDisable);
        /* bool screen_shot_disable = 15; */
        if (message.screenShotDisable !== false)
            writer.tag(15, WireType.Varint).bool(message.screenShotDisable);
        /* bool lock_screen_disable = 16; */
        if (message.lockScreenDisable !== false)
            writer.tag(16, WireType.Varint).bool(message.lockScreenDisable);
        /* bool recommend_disable = 17; */
        if (message.recommendDisable !== false)
            writer.tag(17, WireType.Varint).bool(message.recommendDisable);
        /* bool playback_speed_disable = 18; */
        if (message.playbackSpeedDisable !== false)
            writer.tag(18, WireType.Varint).bool(message.playbackSpeedDisable);
        /* bool definition_disable = 19; */
        if (message.definitionDisable !== false)
            writer.tag(19, WireType.Varint).bool(message.definitionDisable);
        /* bool selections_disable = 20; */
        if (message.selectionsDisable !== false)
            writer.tag(20, WireType.Varint).bool(message.selectionsDisable);
        /* bool next_disable = 21; */
        if (message.nextDisable !== false)
            writer.tag(21, WireType.Varint).bool(message.nextDisable);
        /* bool edit_dm_disable = 22; */
        if (message.editDmDisable !== false)
            writer.tag(22, WireType.Varint).bool(message.editDmDisable);
        /* bool small_window_disable = 23; */
        if (message.smallWindowDisable !== false)
            writer.tag(23, WireType.Varint).bool(message.smallWindowDisable);
        /* bool shake_disable = 24; */
        if (message.shakeDisable !== false)
            writer.tag(24, WireType.Varint).bool(message.shakeDisable);
        /* bool outer_dm_disable = 25; */
        if (message.outerDmDisable !== false)
            writer.tag(25, WireType.Varint).bool(message.outerDmDisable);
        /* bool inner_dm_disable = 26; */
        if (message.innerDmDisable !== false)
            writer.tag(26, WireType.Varint).bool(message.innerDmDisable);
        /* bool freya_enter_disable = 27; */
        if (message.freyaEnterDisable !== false)
            writer.tag(27, WireType.Varint).bool(message.freyaEnterDisable);
        /* bool dolby_disable = 28; */
        if (message.dolbyDisable !== false)
            writer.tag(28, WireType.Varint).bool(message.dolbyDisable);
        /* bool freya_full_disable = 29; */
        if (message.freyaFullDisable !== false)
            writer.tag(29, WireType.Varint).bool(message.freyaFullDisable);
        /* bool skip_oped_switch_disable = 30; */
        if (message.skipOpedSwitchDisable !== false)
            writer.tag(30, WireType.Varint).bool(message.skipOpedSwitchDisable);
        /* bool record_screen_disable = 31; */
        if (message.recordScreenDisable !== false)
            writer.tag(31, WireType.Varint).bool(message.recordScreenDisable);
        /* bool color_optimize_disable = 32; */
        if (message.colorOptimizeDisable !== false)
            writer.tag(32, WireType.Varint).bool(message.colorOptimizeDisable);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.pgc.gateway.player.v2.PlayAbilityConf
 */
export const PlayAbilityConf = new PlayAbilityConf$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayAbilityExtConf$Type extends MessageType<PlayAbilityExtConf> {
    constructor() {
        super("bilibili.pgc.gateway.player.v2.PlayAbilityExtConf", [
            { no: 1, name: "allow_close_subtitle", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "freya_config", kind: "message", T: () => FreyaConfig },
            { no: 3, name: "cast_tips", kind: "message", T: () => CastTips }
        ]);
    }
    create(value?: PartialMessage<PlayAbilityExtConf>): PlayAbilityExtConf {
        const message = { allowCloseSubtitle: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayAbilityExtConf>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayAbilityExtConf): PlayAbilityExtConf {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool allow_close_subtitle */ 1:
                    message.allowCloseSubtitle = reader.bool();
                    break;
                case /* bilibili.pgc.gateway.player.v2.FreyaConfig freya_config */ 2:
                    message.freyaConfig = FreyaConfig.internalBinaryRead(reader, reader.uint32(), options, message.freyaConfig);
                    break;
                case /* bilibili.pgc.gateway.player.v2.CastTips cast_tips */ 3:
                    message.castTips = CastTips.internalBinaryRead(reader, reader.uint32(), options, message.castTips);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayAbilityExtConf, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool allow_close_subtitle = 1; */
        if (message.allowCloseSubtitle !== false)
            writer.tag(1, WireType.Varint).bool(message.allowCloseSubtitle);
        /* bilibili.pgc.gateway.player.v2.FreyaConfig freya_config = 2; */
        if (message.freyaConfig)
            FreyaConfig.internalBinaryWrite(message.freyaConfig, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.pgc.gateway.player.v2.CastTips cast_tips = 3; */
        if (message.castTips)
            CastTips.internalBinaryWrite(message.castTips, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.pgc.gateway.player.v2.PlayAbilityExtConf
 */
export const PlayAbilityExtConf = new PlayAbilityExtConf$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayViewBusinessInfo$Type extends MessageType<PlayViewBusinessInfo> {
    constructor() {
        super("bilibili.pgc.gateway.player.v2.PlayViewBusinessInfo", [
            { no: 1, name: "is_preview", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "bp", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "marlin_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "playback_speed_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "continue_play_info", kind: "message", T: () => ContinuePlayInfo },
            { no: 6, name: "clip_info", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ClipInfo },
            { no: 7, name: "inline_type", kind: "enum", T: () => ["bilibili.pgc.gateway.player.v2.InlineType", InlineType] },
            { no: 8, name: "ep_whole_duration", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "dimension", kind: "message", T: () => Dimension },
            { no: 10, name: "quality_ext_map", kind: "map", K: 5 /*ScalarType.INT32*/, V: { kind: "message", T: () => QualityExtInfo } },
            { no: 11, name: "exp_map", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 5 /*ScalarType.INT32*/ } },
            { no: 12, name: "drm_tech_type", kind: "enum", T: () => ["bilibili.pgc.gateway.player.v2.DrmTechType", DrmTechType] }
        ]);
    }
    create(value?: PartialMessage<PlayViewBusinessInfo>): PlayViewBusinessInfo {
        const message = { isPreview: false, bp: false, marlinToken: "", playbackSpeedColor: "", clipInfo: [], inlineType: 0, epWholeDuration: 0, qualityExtMap: {}, expMap: {}, drmTechType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayViewBusinessInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayViewBusinessInfo): PlayViewBusinessInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_preview */ 1:
                    message.isPreview = reader.bool();
                    break;
                case /* bool bp */ 2:
                    message.bp = reader.bool();
                    break;
                case /* string marlin_token */ 3:
                    message.marlinToken = reader.string();
                    break;
                case /* string playback_speed_color */ 4:
                    message.playbackSpeedColor = reader.string();
                    break;
                case /* bilibili.pgc.gateway.player.v2.ContinuePlayInfo continue_play_info */ 5:
                    message.continuePlayInfo = ContinuePlayInfo.internalBinaryRead(reader, reader.uint32(), options, message.continuePlayInfo);
                    break;
                case /* repeated bilibili.pgc.gateway.player.v2.ClipInfo clip_info */ 6:
                    message.clipInfo.push(ClipInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bilibili.pgc.gateway.player.v2.InlineType inline_type */ 7:
                    message.inlineType = reader.int32();
                    break;
                case /* int32 ep_whole_duration */ 8:
                    message.epWholeDuration = reader.int32();
                    break;
                case /* bilibili.pgc.gateway.player.v2.Dimension dimension */ 9:
                    message.dimension = Dimension.internalBinaryRead(reader, reader.uint32(), options, message.dimension);
                    break;
                case /* map<int32, bilibili.pgc.gateway.player.v2.QualityExtInfo> quality_ext_map */ 10:
                    this.binaryReadMap10(message.qualityExtMap, reader, options);
                    break;
                case /* map<string, int32> exp_map */ 11:
                    this.binaryReadMap11(message.expMap, reader, options);
                    break;
                case /* bilibili.pgc.gateway.player.v2.DrmTechType drm_tech_type */ 12:
                    message.drmTechType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap10(map: PlayViewBusinessInfo["qualityExtMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof PlayViewBusinessInfo["qualityExtMap"] | undefined, val: PlayViewBusinessInfo["qualityExtMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.int32();
                    break;
                case 2:
                    val = QualityExtInfo.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bilibili.pgc.gateway.player.v2.PlayViewBusinessInfo.quality_ext_map");
            }
        }
        map[key ?? 0] = val ?? QualityExtInfo.create();
    }
    private binaryReadMap11(map: PlayViewBusinessInfo["expMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof PlayViewBusinessInfo["expMap"] | undefined, val: PlayViewBusinessInfo["expMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.int32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bilibili.pgc.gateway.player.v2.PlayViewBusinessInfo.exp_map");
            }
        }
        map[key ?? ""] = val ?? 0;
    }
    internalBinaryWrite(message: PlayViewBusinessInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool is_preview = 1; */
        if (message.isPreview !== false)
            writer.tag(1, WireType.Varint).bool(message.isPreview);
        /* bool bp = 2; */
        if (message.bp !== false)
            writer.tag(2, WireType.Varint).bool(message.bp);
        /* string marlin_token = 3; */
        if (message.marlinToken !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.marlinToken);
        /* string playback_speed_color = 4; */
        if (message.playbackSpeedColor !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.playbackSpeedColor);
        /* bilibili.pgc.gateway.player.v2.ContinuePlayInfo continue_play_info = 5; */
        if (message.continuePlayInfo)
            ContinuePlayInfo.internalBinaryWrite(message.continuePlayInfo, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.pgc.gateway.player.v2.ClipInfo clip_info = 6; */
        for (let i = 0; i < message.clipInfo.length; i++)
            ClipInfo.internalBinaryWrite(message.clipInfo[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.pgc.gateway.player.v2.InlineType inline_type = 7; */
        if (message.inlineType !== 0)
            writer.tag(7, WireType.Varint).int32(message.inlineType);
        /* int32 ep_whole_duration = 8; */
        if (message.epWholeDuration !== 0)
            writer.tag(8, WireType.Varint).int32(message.epWholeDuration);
        /* bilibili.pgc.gateway.player.v2.Dimension dimension = 9; */
        if (message.dimension)
            Dimension.internalBinaryWrite(message.dimension, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* map<int32, bilibili.pgc.gateway.player.v2.QualityExtInfo> quality_ext_map = 10; */
        for (let k of Object.keys(message.qualityExtMap)) {
            writer.tag(10, WireType.LengthDelimited).fork().tag(1, WireType.Varint).int32(parseInt(k));
            writer.tag(2, WireType.LengthDelimited).fork();
            QualityExtInfo.internalBinaryWrite(message.qualityExtMap[k as any], writer, options);
            writer.join().join();
        }
        /* map<string, int32> exp_map = 11; */
        for (let k of Object.keys(message.expMap))
            writer.tag(11, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.Varint).int32(message.expMap[k]).join();
        /* bilibili.pgc.gateway.player.v2.DrmTechType drm_tech_type = 12; */
        if (message.drmTechType !== 0)
            writer.tag(12, WireType.Varint).int32(message.drmTechType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.pgc.gateway.player.v2.PlayViewBusinessInfo
 */
export const PlayViewBusinessInfo = new PlayViewBusinessInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayViewReply$Type extends MessageType<PlayViewReply> {
    constructor() {
        super("bilibili.pgc.gateway.player.v2.PlayViewReply", [
            { no: 1, name: "video_info", kind: "message", T: () => VideoInfo },
            { no: 2, name: "play_conf", kind: "message", T: () => PlayAbilityConf },
            { no: 3, name: "business", kind: "message", T: () => PlayViewBusinessInfo },
            { no: 4, name: "event", kind: "message", T: () => Event },
            { no: 5, name: "view_info", kind: "message", T: () => ViewInfo },
            { no: 6, name: "play_ext_conf", kind: "message", T: () => PlayAbilityExtConf }
        ]);
    }
    create(value?: PartialMessage<PlayViewReply>): PlayViewReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayViewReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayViewReply): PlayViewReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.pgc.gateway.player.v2.VideoInfo video_info */ 1:
                    message.videoInfo = VideoInfo.internalBinaryRead(reader, reader.uint32(), options, message.videoInfo);
                    break;
                case /* bilibili.pgc.gateway.player.v2.PlayAbilityConf play_conf */ 2:
                    message.playConf = PlayAbilityConf.internalBinaryRead(reader, reader.uint32(), options, message.playConf);
                    break;
                case /* bilibili.pgc.gateway.player.v2.PlayViewBusinessInfo business */ 3:
                    message.business = PlayViewBusinessInfo.internalBinaryRead(reader, reader.uint32(), options, message.business);
                    break;
                case /* bilibili.pgc.gateway.player.v2.Event event */ 4:
                    message.event = Event.internalBinaryRead(reader, reader.uint32(), options, message.event);
                    break;
                case /* bilibili.pgc.gateway.player.v2.ViewInfo view_info */ 5:
                    message.viewInfo = ViewInfo.internalBinaryRead(reader, reader.uint32(), options, message.viewInfo);
                    break;
                case /* bilibili.pgc.gateway.player.v2.PlayAbilityExtConf play_ext_conf */ 6:
                    message.playExtConf = PlayAbilityExtConf.internalBinaryRead(reader, reader.uint32(), options, message.playExtConf);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayViewReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bilibili.pgc.gateway.player.v2.VideoInfo video_info = 1; */
        if (message.videoInfo)
            VideoInfo.internalBinaryWrite(message.videoInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.pgc.gateway.player.v2.PlayAbilityConf play_conf = 2; */
        if (message.playConf)
            PlayAbilityConf.internalBinaryWrite(message.playConf, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.pgc.gateway.player.v2.PlayViewBusinessInfo business = 3; */
        if (message.business)
            PlayViewBusinessInfo.internalBinaryWrite(message.business, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.pgc.gateway.player.v2.Event event = 4; */
        if (message.event)
            Event.internalBinaryWrite(message.event, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.pgc.gateway.player.v2.ViewInfo view_info = 5; */
        if (message.viewInfo)
            ViewInfo.internalBinaryWrite(message.viewInfo, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.pgc.gateway.player.v2.PlayAbilityExtConf play_ext_conf = 6; */
        if (message.playExtConf)
            PlayAbilityExtConf.internalBinaryWrite(message.playExtConf, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.pgc.gateway.player.v2.PlayViewReply
 */
export const PlayViewReply = new PlayViewReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayViewReq$Type extends MessageType<PlayViewReq> {
    constructor() {
        super("bilibili.pgc.gateway.player.v2.PlayViewReq", [
            { no: 1, name: "epid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "cid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "qn", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "fnver", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "fnval", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "download", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "force_host", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "fourk", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "spmid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "from_spmid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "teenagers_mode", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "prefer_codec_type", kind: "enum", T: () => ["bilibili.pgc.gateway.player.v2.CodeType", CodeType] },
            { no: 13, name: "is_preview", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "room_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 15, name: "is_need_view_info", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 16, name: "scene_control", kind: "message", T: () => SceneControl },
            { no: 17, name: "inline_scene", kind: "enum", T: () => ["bilibili.pgc.gateway.player.v2.InlineScene", InlineScene] },
            { no: 18, name: "material_no", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<PlayViewReq>): PlayViewReq {
        const message = { epid: 0n, cid: 0n, qn: 0n, fnver: 0, fnval: 0, download: 0, forceHost: 0, fourk: false, spmid: "", fromSpmid: "", teenagersMode: 0, preferCodecType: 0, isPreview: false, roomId: 0n, isNeedViewInfo: false, inlineScene: 0, materialNo: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayViewReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayViewReq): PlayViewReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 epid */ 1:
                    message.epid = reader.int64().toBigInt();
                    break;
                case /* int64 cid */ 2:
                    message.cid = reader.int64().toBigInt();
                    break;
                case /* int64 qn */ 3:
                    message.qn = reader.int64().toBigInt();
                    break;
                case /* int32 fnver */ 4:
                    message.fnver = reader.int32();
                    break;
                case /* int32 fnval */ 5:
                    message.fnval = reader.int32();
                    break;
                case /* uint32 download */ 6:
                    message.download = reader.uint32();
                    break;
                case /* int32 force_host */ 7:
                    message.forceHost = reader.int32();
                    break;
                case /* bool fourk */ 8:
                    message.fourk = reader.bool();
                    break;
                case /* string spmid */ 9:
                    message.spmid = reader.string();
                    break;
                case /* string from_spmid */ 10:
                    message.fromSpmid = reader.string();
                    break;
                case /* int32 teenagers_mode */ 11:
                    message.teenagersMode = reader.int32();
                    break;
                case /* bilibili.pgc.gateway.player.v2.CodeType prefer_codec_type */ 12:
                    message.preferCodecType = reader.int32();
                    break;
                case /* bool is_preview */ 13:
                    message.isPreview = reader.bool();
                    break;
                case /* int64 room_id */ 14:
                    message.roomId = reader.int64().toBigInt();
                    break;
                case /* bool is_need_view_info */ 15:
                    message.isNeedViewInfo = reader.bool();
                    break;
                case /* bilibili.pgc.gateway.player.v2.SceneControl scene_control */ 16:
                    message.sceneControl = SceneControl.internalBinaryRead(reader, reader.uint32(), options, message.sceneControl);
                    break;
                case /* bilibili.pgc.gateway.player.v2.InlineScene inline_scene */ 17:
                    message.inlineScene = reader.int32();
                    break;
                case /* int64 material_no */ 18:
                    message.materialNo = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayViewReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 epid = 1; */
        if (message.epid !== 0n)
            writer.tag(1, WireType.Varint).int64(message.epid);
        /* int64 cid = 2; */
        if (message.cid !== 0n)
            writer.tag(2, WireType.Varint).int64(message.cid);
        /* int64 qn = 3; */
        if (message.qn !== 0n)
            writer.tag(3, WireType.Varint).int64(message.qn);
        /* int32 fnver = 4; */
        if (message.fnver !== 0)
            writer.tag(4, WireType.Varint).int32(message.fnver);
        /* int32 fnval = 5; */
        if (message.fnval !== 0)
            writer.tag(5, WireType.Varint).int32(message.fnval);
        /* uint32 download = 6; */
        if (message.download !== 0)
            writer.tag(6, WireType.Varint).uint32(message.download);
        /* int32 force_host = 7; */
        if (message.forceHost !== 0)
            writer.tag(7, WireType.Varint).int32(message.forceHost);
        /* bool fourk = 8; */
        if (message.fourk !== false)
            writer.tag(8, WireType.Varint).bool(message.fourk);
        /* string spmid = 9; */
        if (message.spmid !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.spmid);
        /* string from_spmid = 10; */
        if (message.fromSpmid !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.fromSpmid);
        /* int32 teenagers_mode = 11; */
        if (message.teenagersMode !== 0)
            writer.tag(11, WireType.Varint).int32(message.teenagersMode);
        /* bilibili.pgc.gateway.player.v2.CodeType prefer_codec_type = 12; */
        if (message.preferCodecType !== 0)
            writer.tag(12, WireType.Varint).int32(message.preferCodecType);
        /* bool is_preview = 13; */
        if (message.isPreview !== false)
            writer.tag(13, WireType.Varint).bool(message.isPreview);
        /* int64 room_id = 14; */
        if (message.roomId !== 0n)
            writer.tag(14, WireType.Varint).int64(message.roomId);
        /* bool is_need_view_info = 15; */
        if (message.isNeedViewInfo !== false)
            writer.tag(15, WireType.Varint).bool(message.isNeedViewInfo);
        /* bilibili.pgc.gateway.player.v2.SceneControl scene_control = 16; */
        if (message.sceneControl)
            SceneControl.internalBinaryWrite(message.sceneControl, writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.pgc.gateway.player.v2.InlineScene inline_scene = 17; */
        if (message.inlineScene !== 0)
            writer.tag(17, WireType.Varint).int32(message.inlineScene);
        /* int64 material_no = 18; */
        if (message.materialNo !== 0n)
            writer.tag(18, WireType.Varint).int64(message.materialNo);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.pgc.gateway.player.v2.PlayViewReq
 */
export const PlayViewReq = new PlayViewReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PopWin$Type extends MessageType<PopWin> {
    constructor() {
        super("bilibili.pgc.gateway.player.v2.PopWin", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "coupon", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Coupon },
            { no: 3, name: "button", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ButtonInfo },
            { no: 4, name: "bottom_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "pop_title", kind: "message", T: () => TextInfo },
            { no: 6, name: "subtitle", kind: "message", T: () => TextInfo },
            { no: 7, name: "bottom_desc", kind: "message", T: () => ButtonInfo },
            { no: 8, name: "cover", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "pop_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PopWin>): PopWin {
        const message = { title: "", coupon: [], button: [], bottomText: "", cover: "", popType: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PopWin>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PopWin): PopWin {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* repeated bilibili.pgc.gateway.player.v2.Coupon coupon */ 2:
                    message.coupon.push(Coupon.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated bilibili.pgc.gateway.player.v2.ButtonInfo button */ 3:
                    message.button.push(ButtonInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string bottom_text */ 4:
                    message.bottomText = reader.string();
                    break;
                case /* bilibili.pgc.gateway.player.v2.TextInfo pop_title */ 5:
                    message.popTitle = TextInfo.internalBinaryRead(reader, reader.uint32(), options, message.popTitle);
                    break;
                case /* bilibili.pgc.gateway.player.v2.TextInfo subtitle */ 6:
                    message.subtitle = TextInfo.internalBinaryRead(reader, reader.uint32(), options, message.subtitle);
                    break;
                case /* bilibili.pgc.gateway.player.v2.ButtonInfo bottom_desc */ 7:
                    message.bottomDesc = ButtonInfo.internalBinaryRead(reader, reader.uint32(), options, message.bottomDesc);
                    break;
                case /* string cover */ 8:
                    message.cover = reader.string();
                    break;
                case /* string pop_type */ 9:
                    message.popType = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PopWin, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* repeated bilibili.pgc.gateway.player.v2.Coupon coupon = 2; */
        for (let i = 0; i < message.coupon.length; i++)
            Coupon.internalBinaryWrite(message.coupon[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.pgc.gateway.player.v2.ButtonInfo button = 3; */
        for (let i = 0; i < message.button.length; i++)
            ButtonInfo.internalBinaryWrite(message.button[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string bottom_text = 4; */
        if (message.bottomText !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.bottomText);
        /* bilibili.pgc.gateway.player.v2.TextInfo pop_title = 5; */
        if (message.popTitle)
            TextInfo.internalBinaryWrite(message.popTitle, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.pgc.gateway.player.v2.TextInfo subtitle = 6; */
        if (message.subtitle)
            TextInfo.internalBinaryWrite(message.subtitle, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.pgc.gateway.player.v2.ButtonInfo bottom_desc = 7; */
        if (message.bottomDesc)
            ButtonInfo.internalBinaryWrite(message.bottomDesc, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* string cover = 8; */
        if (message.cover !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.cover);
        /* string pop_type = 9; */
        if (message.popType !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.popType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.pgc.gateway.player.v2.PopWin
 */
export const PopWin = new PopWin$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PromptBar$Type extends MessageType<PromptBar> {
    constructor() {
        super("bilibili.pgc.gateway.player.v2.PromptBar", [
            { no: 1, name: "title", kind: "message", T: () => TextInfo },
            { no: 2, name: "sub_title", kind: "message", T: () => TextInfo },
            { no: 3, name: "sub_title_icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "bg_image", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "bg_gradient_color", kind: "message", T: () => GradientColor },
            { no: 6, name: "button", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ButtonInfo },
            { no: 7, name: "report", kind: "message", T: () => Report },
            { no: 8, name: "full_screen_ip_icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "full_screen_bg_gradient_color", kind: "message", T: () => GradientColor }
        ]);
    }
    create(value?: PartialMessage<PromptBar>): PromptBar {
        const message = { subTitleIcon: "", bgImage: "", button: [], fullScreenIpIcon: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PromptBar>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PromptBar): PromptBar {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.pgc.gateway.player.v2.TextInfo title */ 1:
                    message.title = TextInfo.internalBinaryRead(reader, reader.uint32(), options, message.title);
                    break;
                case /* bilibili.pgc.gateway.player.v2.TextInfo sub_title */ 2:
                    message.subTitle = TextInfo.internalBinaryRead(reader, reader.uint32(), options, message.subTitle);
                    break;
                case /* string sub_title_icon */ 3:
                    message.subTitleIcon = reader.string();
                    break;
                case /* string bg_image */ 4:
                    message.bgImage = reader.string();
                    break;
                case /* bilibili.pgc.gateway.player.v2.GradientColor bg_gradient_color */ 5:
                    message.bgGradientColor = GradientColor.internalBinaryRead(reader, reader.uint32(), options, message.bgGradientColor);
                    break;
                case /* repeated bilibili.pgc.gateway.player.v2.ButtonInfo button */ 6:
                    message.button.push(ButtonInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bilibili.pgc.gateway.player.v2.Report report */ 7:
                    message.report = Report.internalBinaryRead(reader, reader.uint32(), options, message.report);
                    break;
                case /* string full_screen_ip_icon */ 8:
                    message.fullScreenIpIcon = reader.string();
                    break;
                case /* bilibili.pgc.gateway.player.v2.GradientColor full_screen_bg_gradient_color */ 9:
                    message.fullScreenBgGradientColor = GradientColor.internalBinaryRead(reader, reader.uint32(), options, message.fullScreenBgGradientColor);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PromptBar, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bilibili.pgc.gateway.player.v2.TextInfo title = 1; */
        if (message.title)
            TextInfo.internalBinaryWrite(message.title, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.pgc.gateway.player.v2.TextInfo sub_title = 2; */
        if (message.subTitle)
            TextInfo.internalBinaryWrite(message.subTitle, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string sub_title_icon = 3; */
        if (message.subTitleIcon !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.subTitleIcon);
        /* string bg_image = 4; */
        if (message.bgImage !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.bgImage);
        /* bilibili.pgc.gateway.player.v2.GradientColor bg_gradient_color = 5; */
        if (message.bgGradientColor)
            GradientColor.internalBinaryWrite(message.bgGradientColor, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.pgc.gateway.player.v2.ButtonInfo button = 6; */
        for (let i = 0; i < message.button.length; i++)
            ButtonInfo.internalBinaryWrite(message.button[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.pgc.gateway.player.v2.Report report = 7; */
        if (message.report)
            Report.internalBinaryWrite(message.report, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* string full_screen_ip_icon = 8; */
        if (message.fullScreenIpIcon !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.fullScreenIpIcon);
        /* bilibili.pgc.gateway.player.v2.GradientColor full_screen_bg_gradient_color = 9; */
        if (message.fullScreenBgGradientColor)
            GradientColor.internalBinaryWrite(message.fullScreenBgGradientColor, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.pgc.gateway.player.v2.PromptBar
 */
export const PromptBar = new PromptBar$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QualityExtInfo$Type extends MessageType<QualityExtInfo> {
    constructor() {
        super("bilibili.pgc.gateway.player.v2.QualityExtInfo", [
            { no: 1, name: "trial_support", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<QualityExtInfo>): QualityExtInfo {
        const message = { trialSupport: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QualityExtInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QualityExtInfo): QualityExtInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool trial_support */ 1:
                    message.trialSupport = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QualityExtInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool trial_support = 1; */
        if (message.trialSupport !== false)
            writer.tag(1, WireType.Varint).bool(message.trialSupport);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.pgc.gateway.player.v2.QualityExtInfo
 */
export const QualityExtInfo = new QualityExtInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Report$Type extends MessageType<Report> {
    constructor() {
        super("bilibili.pgc.gateway.player.v2.Report", [
            { no: 1, name: "show_event_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "click_event_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "extends", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Report>): Report {
        const message = { showEventId: "", clickEventId: "", extends: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Report>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Report): Report {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string show_event_id */ 1:
                    message.showEventId = reader.string();
                    break;
                case /* string click_event_id */ 2:
                    message.clickEventId = reader.string();
                    break;
                case /* string extends */ 3:
                    message.extends = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Report, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string show_event_id = 1; */
        if (message.showEventId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.showEventId);
        /* string click_event_id = 2; */
        if (message.clickEventId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.clickEventId);
        /* string extends = 3; */
        if (message.extends !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.extends);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.pgc.gateway.player.v2.Report
 */
export const Report = new Report$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResponseUrl$Type extends MessageType<ResponseUrl> {
    constructor() {
        super("bilibili.pgc.gateway.player.v2.ResponseUrl", [
            { no: 1, name: "order", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "length", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "size", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "backup_url", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "md5", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ResponseUrl>): ResponseUrl {
        const message = { order: 0, length: 0n, size: 0n, url: "", backupUrl: [], md5: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ResponseUrl>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResponseUrl): ResponseUrl {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 order */ 1:
                    message.order = reader.uint32();
                    break;
                case /* uint64 length */ 2:
                    message.length = reader.uint64().toBigInt();
                    break;
                case /* uint64 size */ 3:
                    message.size = reader.uint64().toBigInt();
                    break;
                case /* string url */ 4:
                    message.url = reader.string();
                    break;
                case /* repeated string backup_url */ 5:
                    message.backupUrl.push(reader.string());
                    break;
                case /* string md5 */ 6:
                    message.md5 = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResponseUrl, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 order = 1; */
        if (message.order !== 0)
            writer.tag(1, WireType.Varint).uint32(message.order);
        /* uint64 length = 2; */
        if (message.length !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.length);
        /* uint64 size = 3; */
        if (message.size !== 0n)
            writer.tag(3, WireType.Varint).uint64(message.size);
        /* string url = 4; */
        if (message.url !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.url);
        /* repeated string backup_url = 5; */
        for (let i = 0; i < message.backupUrl.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.backupUrl[i]);
        /* string md5 = 6; */
        if (message.md5 !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.md5);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.pgc.gateway.player.v2.ResponseUrl
 */
export const ResponseUrl = new ResponseUrl$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneControl$Type extends MessageType<SceneControl> {
    constructor() {
        super("bilibili.pgc.gateway.player.v2.SceneControl", [
            { no: 1, name: "fav_playlist", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "small_window", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "pip", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "was_he_inline", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "is_need_trial", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SceneControl>): SceneControl {
        const message = { favPlaylist: false, smallWindow: false, pip: false, wasHeInline: false, isNeedTrial: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneControl>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneControl): SceneControl {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool fav_playlist */ 1:
                    message.favPlaylist = reader.bool();
                    break;
                case /* bool small_window */ 2:
                    message.smallWindow = reader.bool();
                    break;
                case /* bool pip */ 3:
                    message.pip = reader.bool();
                    break;
                case /* bool was_he_inline */ 4:
                    message.wasHeInline = reader.bool();
                    break;
                case /* bool is_need_trial */ 5:
                    message.isNeedTrial = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneControl, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool fav_playlist = 1; */
        if (message.favPlaylist !== false)
            writer.tag(1, WireType.Varint).bool(message.favPlaylist);
        /* bool small_window = 2; */
        if (message.smallWindow !== false)
            writer.tag(2, WireType.Varint).bool(message.smallWindow);
        /* bool pip = 3; */
        if (message.pip !== false)
            writer.tag(3, WireType.Varint).bool(message.pip);
        /* bool was_he_inline = 4; */
        if (message.wasHeInline !== false)
            writer.tag(4, WireType.Varint).bool(message.wasHeInline);
        /* bool is_need_trial = 5; */
        if (message.isNeedTrial !== false)
            writer.tag(5, WireType.Varint).bool(message.isNeedTrial);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.pgc.gateway.player.v2.SceneControl
 */
export const SceneControl = new SceneControl$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SegmentVideo$Type extends MessageType<SegmentVideo> {
    constructor() {
        super("bilibili.pgc.gateway.player.v2.SegmentVideo", [
            { no: 1, name: "segment", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ResponseUrl }
        ]);
    }
    create(value?: PartialMessage<SegmentVideo>): SegmentVideo {
        const message = { segment: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SegmentVideo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SegmentVideo): SegmentVideo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bilibili.pgc.gateway.player.v2.ResponseUrl segment */ 1:
                    message.segment.push(ResponseUrl.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SegmentVideo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated bilibili.pgc.gateway.player.v2.ResponseUrl segment = 1; */
        for (let i = 0; i < message.segment.length; i++)
            ResponseUrl.internalBinaryWrite(message.segment[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.pgc.gateway.player.v2.SegmentVideo
 */
export const SegmentVideo = new SegmentVideo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Shake$Type extends MessageType<Shake> {
    constructor() {
        super("bilibili.pgc.gateway.player.v2.Shake", [
            { no: 1, name: "file", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Shake>): Shake {
        const message = { file: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Shake>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Shake): Shake {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string file */ 1:
                    message.file = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Shake, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string file = 1; */
        if (message.file !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.file);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.pgc.gateway.player.v2.Shake
 */
export const Shake = new Shake$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Stream$Type extends MessageType<Stream> {
    constructor() {
        super("bilibili.pgc.gateway.player.v2.Stream", [
            { no: 1, name: "info", kind: "message", T: () => StreamInfo },
            { no: 2, name: "dash_video", kind: "message", oneof: "content", T: () => DashVideo },
            { no: 3, name: "segment_video", kind: "message", oneof: "content", T: () => SegmentVideo }
        ]);
    }
    create(value?: PartialMessage<Stream>): Stream {
        const message = { content: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Stream>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Stream): Stream {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.pgc.gateway.player.v2.StreamInfo info */ 1:
                    message.info = StreamInfo.internalBinaryRead(reader, reader.uint32(), options, message.info);
                    break;
                case /* bilibili.pgc.gateway.player.v2.DashVideo dash_video */ 2:
                    message.content = {
                        oneofKind: "dashVideo",
                        dashVideo: DashVideo.internalBinaryRead(reader, reader.uint32(), options, (message.content as any).dashVideo)
                    };
                    break;
                case /* bilibili.pgc.gateway.player.v2.SegmentVideo segment_video */ 3:
                    message.content = {
                        oneofKind: "segmentVideo",
                        segmentVideo: SegmentVideo.internalBinaryRead(reader, reader.uint32(), options, (message.content as any).segmentVideo)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Stream, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bilibili.pgc.gateway.player.v2.StreamInfo info = 1; */
        if (message.info)
            StreamInfo.internalBinaryWrite(message.info, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.pgc.gateway.player.v2.DashVideo dash_video = 2; */
        if (message.content.oneofKind === "dashVideo")
            DashVideo.internalBinaryWrite(message.content.dashVideo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.pgc.gateway.player.v2.SegmentVideo segment_video = 3; */
        if (message.content.oneofKind === "segmentVideo")
            SegmentVideo.internalBinaryWrite(message.content.segmentVideo, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.pgc.gateway.player.v2.Stream
 */
export const Stream = new Stream$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamInfo$Type extends MessageType<StreamInfo> {
    constructor() {
        super("bilibili.pgc.gateway.player.v2.StreamInfo", [
            { no: 1, name: "quality", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "format", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "err_code", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "limit", kind: "message", T: () => StreamLimit },
            { no: 6, name: "need_vip", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "need_login", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "intact", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "no_rexcode", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "attribute", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "new_description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "display_desc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "superscript", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StreamInfo>): StreamInfo {
        const message = { quality: 0, format: "", description: "", errCode: 0, needVip: false, needLogin: false, intact: false, noRexcode: false, attribute: 0n, newDescription: "", displayDesc: "", superscript: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StreamInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamInfo): StreamInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 quality */ 1:
                    message.quality = reader.uint32();
                    break;
                case /* string format */ 2:
                    message.format = reader.string();
                    break;
                case /* string description */ 3:
                    message.description = reader.string();
                    break;
                case /* uint32 err_code */ 4:
                    message.errCode = reader.uint32();
                    break;
                case /* bilibili.pgc.gateway.player.v2.StreamLimit limit */ 5:
                    message.limit = StreamLimit.internalBinaryRead(reader, reader.uint32(), options, message.limit);
                    break;
                case /* bool need_vip */ 6:
                    message.needVip = reader.bool();
                    break;
                case /* bool need_login */ 7:
                    message.needLogin = reader.bool();
                    break;
                case /* bool intact */ 8:
                    message.intact = reader.bool();
                    break;
                case /* bool no_rexcode */ 9:
                    message.noRexcode = reader.bool();
                    break;
                case /* int64 attribute */ 10:
                    message.attribute = reader.int64().toBigInt();
                    break;
                case /* string new_description */ 11:
                    message.newDescription = reader.string();
                    break;
                case /* string display_desc */ 12:
                    message.displayDesc = reader.string();
                    break;
                case /* string superscript */ 13:
                    message.superscript = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 quality = 1; */
        if (message.quality !== 0)
            writer.tag(1, WireType.Varint).uint32(message.quality);
        /* string format = 2; */
        if (message.format !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.format);
        /* string description = 3; */
        if (message.description !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.description);
        /* uint32 err_code = 4; */
        if (message.errCode !== 0)
            writer.tag(4, WireType.Varint).uint32(message.errCode);
        /* bilibili.pgc.gateway.player.v2.StreamLimit limit = 5; */
        if (message.limit)
            StreamLimit.internalBinaryWrite(message.limit, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* bool need_vip = 6; */
        if (message.needVip !== false)
            writer.tag(6, WireType.Varint).bool(message.needVip);
        /* bool need_login = 7; */
        if (message.needLogin !== false)
            writer.tag(7, WireType.Varint).bool(message.needLogin);
        /* bool intact = 8; */
        if (message.intact !== false)
            writer.tag(8, WireType.Varint).bool(message.intact);
        /* bool no_rexcode = 9; */
        if (message.noRexcode !== false)
            writer.tag(9, WireType.Varint).bool(message.noRexcode);
        /* int64 attribute = 10; */
        if (message.attribute !== 0n)
            writer.tag(10, WireType.Varint).int64(message.attribute);
        /* string new_description = 11; */
        if (message.newDescription !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.newDescription);
        /* string display_desc = 12; */
        if (message.displayDesc !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.displayDesc);
        /* string superscript = 13; */
        if (message.superscript !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.superscript);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.pgc.gateway.player.v2.StreamInfo
 */
export const StreamInfo = new StreamInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamLimit$Type extends MessageType<StreamLimit> {
    constructor() {
        super("bilibili.pgc.gateway.player.v2.StreamLimit", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "msg", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StreamLimit>): StreamLimit {
        const message = { title: "", uri: "", msg: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StreamLimit>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamLimit): StreamLimit {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string uri */ 2:
                    message.uri = reader.string();
                    break;
                case /* string msg */ 3:
                    message.msg = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamLimit, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string uri = 2; */
        if (message.uri !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.uri);
        /* string msg = 3; */
        if (message.msg !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.msg);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.pgc.gateway.player.v2.StreamLimit
 */
export const StreamLimit = new StreamLimit$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TextInfo$Type extends MessageType<TextInfo> {
    constructor() {
        super("bilibili.pgc.gateway.player.v2.TextInfo", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "textColor", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "textColorNight", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TextInfo>): TextInfo {
        const message = { text: "", textColor: "", textColorNight: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TextInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TextInfo): TextInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                case /* string textColor */ 2:
                    message.textColor = reader.string();
                    break;
                case /* string textColorNight */ 3:
                    message.textColorNight = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TextInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        /* string textColor = 2; */
        if (message.textColor !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.textColor);
        /* string textColorNight = 3; */
        if (message.textColorNight !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.textColorNight);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.pgc.gateway.player.v2.TextInfo
 */
export const TextInfo = new TextInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Toast$Type extends MessageType<Toast> {
    constructor() {
        super("bilibili.pgc.gateway.player.v2.Toast", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "button", kind: "message", T: () => ButtonInfo },
            { no: 3, name: "show_style_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "toast_text", kind: "message", T: () => TextInfo },
            { no: 6, name: "report", kind: "message", T: () => Report },
            { no: 7, name: "order_report_params", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<Toast>): Toast {
        const message = { text: "", showStyleType: 0, icon: "", orderReportParams: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Toast>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Toast): Toast {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                case /* bilibili.pgc.gateway.player.v2.ButtonInfo button */ 2:
                    message.button = ButtonInfo.internalBinaryRead(reader, reader.uint32(), options, message.button);
                    break;
                case /* int32 show_style_type */ 3:
                    message.showStyleType = reader.int32();
                    break;
                case /* string icon */ 4:
                    message.icon = reader.string();
                    break;
                case /* bilibili.pgc.gateway.player.v2.TextInfo toast_text */ 5:
                    message.toastText = TextInfo.internalBinaryRead(reader, reader.uint32(), options, message.toastText);
                    break;
                case /* bilibili.pgc.gateway.player.v2.Report report */ 6:
                    message.report = Report.internalBinaryRead(reader, reader.uint32(), options, message.report);
                    break;
                case /* map<string, string> order_report_params */ 7:
                    this.binaryReadMap7(message.orderReportParams, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap7(map: Toast["orderReportParams"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof Toast["orderReportParams"] | undefined, val: Toast["orderReportParams"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bilibili.pgc.gateway.player.v2.Toast.order_report_params");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: Toast, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        /* bilibili.pgc.gateway.player.v2.ButtonInfo button = 2; */
        if (message.button)
            ButtonInfo.internalBinaryWrite(message.button, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int32 show_style_type = 3; */
        if (message.showStyleType !== 0)
            writer.tag(3, WireType.Varint).int32(message.showStyleType);
        /* string icon = 4; */
        if (message.icon !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.icon);
        /* bilibili.pgc.gateway.player.v2.TextInfo toast_text = 5; */
        if (message.toastText)
            TextInfo.internalBinaryWrite(message.toastText, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.pgc.gateway.player.v2.Report report = 6; */
        if (message.report)
            Report.internalBinaryWrite(message.report, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* map<string, string> order_report_params = 7; */
        for (let k of Object.keys(message.orderReportParams))
            writer.tag(7, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.orderReportParams[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.pgc.gateway.player.v2.Toast
 */
export const Toast = new Toast$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VideoInfo$Type extends MessageType<VideoInfo> {
    constructor() {
        super("bilibili.pgc.gateway.player.v2.VideoInfo", [
            { no: 1, name: "quality", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "format", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "timelength", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "video_codecid", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "stream_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Stream },
            { no: 6, name: "dash_audio", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DashItem },
            { no: 7, name: "dolby", kind: "message", T: () => DolbyItem }
        ]);
    }
    create(value?: PartialMessage<VideoInfo>): VideoInfo {
        const message = { quality: 0, format: "", timelength: 0n, videoCodecid: 0, streamList: [], dashAudio: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VideoInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VideoInfo): VideoInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 quality */ 1:
                    message.quality = reader.uint32();
                    break;
                case /* string format */ 2:
                    message.format = reader.string();
                    break;
                case /* uint64 timelength */ 3:
                    message.timelength = reader.uint64().toBigInt();
                    break;
                case /* uint32 video_codecid */ 4:
                    message.videoCodecid = reader.uint32();
                    break;
                case /* repeated bilibili.pgc.gateway.player.v2.Stream stream_list */ 5:
                    message.streamList.push(Stream.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated bilibili.pgc.gateway.player.v2.DashItem dash_audio */ 6:
                    message.dashAudio.push(DashItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bilibili.pgc.gateway.player.v2.DolbyItem dolby */ 7:
                    message.dolby = DolbyItem.internalBinaryRead(reader, reader.uint32(), options, message.dolby);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VideoInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 quality = 1; */
        if (message.quality !== 0)
            writer.tag(1, WireType.Varint).uint32(message.quality);
        /* string format = 2; */
        if (message.format !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.format);
        /* uint64 timelength = 3; */
        if (message.timelength !== 0n)
            writer.tag(3, WireType.Varint).uint64(message.timelength);
        /* uint32 video_codecid = 4; */
        if (message.videoCodecid !== 0)
            writer.tag(4, WireType.Varint).uint32(message.videoCodecid);
        /* repeated bilibili.pgc.gateway.player.v2.Stream stream_list = 5; */
        for (let i = 0; i < message.streamList.length; i++)
            Stream.internalBinaryWrite(message.streamList[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.pgc.gateway.player.v2.DashItem dash_audio = 6; */
        for (let i = 0; i < message.dashAudio.length; i++)
            DashItem.internalBinaryWrite(message.dashAudio[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.pgc.gateway.player.v2.DolbyItem dolby = 7; */
        if (message.dolby)
            DolbyItem.internalBinaryWrite(message.dolby, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.pgc.gateway.player.v2.VideoInfo
 */
export const VideoInfo = new VideoInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ViewInfo$Type extends MessageType<ViewInfo> {
    constructor() {
        super("bilibili.pgc.gateway.player.v2.ViewInfo", [
            { no: 1, name: "dialog", kind: "message", T: () => Dialog },
            { no: 2, name: "toast", kind: "message", T: () => Toast },
            { no: 3, name: "coupon_info", kind: "message", T: () => CouponInfo },
            { no: 4, name: "demand_no_pay_epids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "end_page", kind: "message", T: () => EndPage },
            { no: 6, name: "exp_config", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 8 /*ScalarType.BOOL*/ } },
            { no: 7, name: "pop_win", kind: "message", T: () => PopWin },
            { no: 8, name: "try_watch_prompt_bar", kind: "message", T: () => PromptBar },
            { no: 9, name: "pay_tip", kind: "message", T: () => PayTip },
            { no: 10, name: "high_definition_trial_info", kind: "message", T: () => HighDefinitionTrialInfo },
            { no: 11, name: "ext_dialog", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Dialog } }
        ]);
    }
    create(value?: PartialMessage<ViewInfo>): ViewInfo {
        const message = { demandNoPayEpids: [], expConfig: {}, extDialog: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ViewInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ViewInfo): ViewInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.pgc.gateway.player.v2.Dialog dialog */ 1:
                    message.dialog = Dialog.internalBinaryRead(reader, reader.uint32(), options, message.dialog);
                    break;
                case /* bilibili.pgc.gateway.player.v2.Toast toast */ 2:
                    message.toast = Toast.internalBinaryRead(reader, reader.uint32(), options, message.toast);
                    break;
                case /* bilibili.pgc.gateway.player.v2.CouponInfo coupon_info */ 3:
                    message.couponInfo = CouponInfo.internalBinaryRead(reader, reader.uint32(), options, message.couponInfo);
                    break;
                case /* repeated int64 demand_no_pay_epids */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.demandNoPayEpids.push(reader.int64().toBigInt());
                    else
                        message.demandNoPayEpids.push(reader.int64().toBigInt());
                    break;
                case /* bilibili.pgc.gateway.player.v2.EndPage end_page */ 5:
                    message.endPage = EndPage.internalBinaryRead(reader, reader.uint32(), options, message.endPage);
                    break;
                case /* map<string, bool> exp_config */ 6:
                    this.binaryReadMap6(message.expConfig, reader, options);
                    break;
                case /* bilibili.pgc.gateway.player.v2.PopWin pop_win */ 7:
                    message.popWin = PopWin.internalBinaryRead(reader, reader.uint32(), options, message.popWin);
                    break;
                case /* bilibili.pgc.gateway.player.v2.PromptBar try_watch_prompt_bar */ 8:
                    message.tryWatchPromptBar = PromptBar.internalBinaryRead(reader, reader.uint32(), options, message.tryWatchPromptBar);
                    break;
                case /* bilibili.pgc.gateway.player.v2.PayTip pay_tip */ 9:
                    message.payTip = PayTip.internalBinaryRead(reader, reader.uint32(), options, message.payTip);
                    break;
                case /* bilibili.pgc.gateway.player.v2.HighDefinitionTrialInfo high_definition_trial_info */ 10:
                    message.highDefinitionTrialInfo = HighDefinitionTrialInfo.internalBinaryRead(reader, reader.uint32(), options, message.highDefinitionTrialInfo);
                    break;
                case /* map<string, bilibili.pgc.gateway.player.v2.Dialog> ext_dialog */ 11:
                    this.binaryReadMap11(message.extDialog, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap6(map: ViewInfo["expConfig"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ViewInfo["expConfig"] | undefined, val: ViewInfo["expConfig"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.bool();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bilibili.pgc.gateway.player.v2.ViewInfo.exp_config");
            }
        }
        map[key ?? ""] = val ?? false;
    }
    private binaryReadMap11(map: ViewInfo["extDialog"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ViewInfo["extDialog"] | undefined, val: ViewInfo["extDialog"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Dialog.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bilibili.pgc.gateway.player.v2.ViewInfo.ext_dialog");
            }
        }
        map[key ?? ""] = val ?? Dialog.create();
    }
    internalBinaryWrite(message: ViewInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bilibili.pgc.gateway.player.v2.Dialog dialog = 1; */
        if (message.dialog)
            Dialog.internalBinaryWrite(message.dialog, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.pgc.gateway.player.v2.Toast toast = 2; */
        if (message.toast)
            Toast.internalBinaryWrite(message.toast, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.pgc.gateway.player.v2.CouponInfo coupon_info = 3; */
        if (message.couponInfo)
            CouponInfo.internalBinaryWrite(message.couponInfo, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated int64 demand_no_pay_epids = 4; */
        if (message.demandNoPayEpids.length) {
            writer.tag(4, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.demandNoPayEpids.length; i++)
                writer.int64(message.demandNoPayEpids[i]);
            writer.join();
        }
        /* bilibili.pgc.gateway.player.v2.EndPage end_page = 5; */
        if (message.endPage)
            EndPage.internalBinaryWrite(message.endPage, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* map<string, bool> exp_config = 6; */
        for (let k of Object.keys(message.expConfig))
            writer.tag(6, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.Varint).bool(message.expConfig[k]).join();
        /* bilibili.pgc.gateway.player.v2.PopWin pop_win = 7; */
        if (message.popWin)
            PopWin.internalBinaryWrite(message.popWin, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.pgc.gateway.player.v2.PromptBar try_watch_prompt_bar = 8; */
        if (message.tryWatchPromptBar)
            PromptBar.internalBinaryWrite(message.tryWatchPromptBar, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.pgc.gateway.player.v2.PayTip pay_tip = 9; */
        if (message.payTip)
            PayTip.internalBinaryWrite(message.payTip, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.pgc.gateway.player.v2.HighDefinitionTrialInfo high_definition_trial_info = 10; */
        if (message.highDefinitionTrialInfo)
            HighDefinitionTrialInfo.internalBinaryWrite(message.highDefinitionTrialInfo, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* map<string, bilibili.pgc.gateway.player.v2.Dialog> ext_dialog = 11; */
        for (let k of Object.keys(message.extDialog)) {
            writer.tag(11, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Dialog.internalBinaryWrite(message.extDialog[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.pgc.gateway.player.v2.ViewInfo
 */
export const ViewInfo = new ViewInfo$Type();
/**
 * @generated ServiceType for protobuf service bilibili.pgc.gateway.player.v2.PlayURL
 */
export const PlayURL = new ServiceType("bilibili.pgc.gateway.player.v2.PlayURL", [
    { name: "PlayView", options: {}, I: PlayViewReq, O: PlayViewReply },
    { name: "PlayViewComic", options: {}, I: PlayViewReq, O: PlayViewReply }
]);
